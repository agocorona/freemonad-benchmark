
==================== FINAL INTERFACE ====================
2016-01-04 15:50:48.2699749 UTC

interface main@main:Main [orphan module] 7102
  interface hash: 28e0fff7e3291e7309c66117c6072609
  ABI hash: 935d94c25fd3bdce508e205d3a4539a2
  export-list hash: 77a7f77971103a47e4453eb65f4fafbb
  orphan hash: aa367184ee33db430ffb35d8fda9e6b6
  flag hash: 6eff8a80d917f19dce294b15d8f0ae16
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies: Base Church Codensity Computation Data.CTQueue
                     Data.FastTCQueue Data.Interface.Sequence Data.Interface.TSequence
                     Data.RTQueue Data.TConsList Data.TSnocList Free Freer NoRemorse
package dependencies: Glob-0.7.5@Glob_L13Y0vSyEWuCVMQ1UQqjan
                      Win32-2.3.1.0@Win32_JH0ECVJdFmmG0JOvttvGqi
                      abstract-par-0.3.3@abstr_0mXTTcYXqAJ3jpj7PU0gDI
                      aeson-0.8.0.2@aeson_8d2trNZtc6ABi2rBagqKNU
                      ansi-terminal-0.6.2.3@ansit_EPZdHsMzHIUFrPItJDdIw6
                      ansi-wl-pprint-0.6.7.3@ansiw_BB1apNAAL9XAzrkvh5hdB7
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      attoparsec-0.12.1.6@attop_5hY081sve2m8WX8p1glGNS base-4.8.1.0
                      binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      blaze-builder-0.4.0.1@blaze_6BKEupqZliOD9r4rLG9ckJ
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      cassava-0.4.4.0@cassa_FWYS3ci2dGH84S3z6ESrpT
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      criterion-1.1.0.0@crite_E1zSWP2U5pWEkk1IdzykVe
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      directory-1.2.2.0@direc_8rNXL6eoIjwIJ6AkzPFdYW
                      dlist-0.7.1.2@dlist_7AixcwRWCwX32HiPCcE7zz
                      erf-2.0.0.0@erf_Be5uVBtPUiRDcHpku4LRl7
                      exceptions-0.8.0.2@excep_8GsEeHgaIks3pVGk6GaELJ
                      filepath-1.4.0.0@filep_KsGE6pHE5eZHSN90ZVax6A
                      free-vl-0.1.3@freev_J4QQawSJSgR1wtyx9RmpxN ghc-prim-0.4.0.0
                      hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy
                      hastache-0.6.1@hasta_IgN0erPE8ECDW62jMSJd6I
                      ieee754-0.7.6@ieee7_83kzroviKXw4npyWO9tKff integer-gmp-1.0.0.0
                      lifted-base-0.2.3.6@lifte_K3cQFA6mRg85rpDaA9numU
                      math-functions-0.1.5.2@mathf_1zyIMc7z3P52XyDvEWek66
                      mmorph-1.0.4@mmorp_8dNpUU8QFPe77rrwKAb20b
                      monad-par-extras-0.3.3@monad_1cXIGmkNxf47Tl0iib9Q6s
                      monad-control-1.0.0.4@monad_3XCDr1mqlERGZgaxuwJF6b
                      monad-par-0.3.4.7@monad_Hv5if1BrtvzJUusTfn3zhD
                      mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      mwc-random-0.13.3.2@mwcra_Lmxryx5XEB1ELstdFQVrRz
                      optparse-applicative-0.11.0.2@optpa_HbbGhX4nF317ZSs2zLlKIF
                      pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR
                      primitive-0.6.1.0@primi_5Jnw7oEuYtM9dmKXelGXVb
                      process-1.2.3.0@proce_92p6c0OJebP7mjyJ5QnhVN
                      resourcet-1.1.6@resou_Ic1TzDDmqYbFNHpzRsDmfS
                      scientific-0.3.3.8@scien_5NQHiMKEgH2DOLHdLSFbA2
                      statistics-0.13.2.3@stati_EihyMT8kNnY7X8Dpk0kZVx
                      stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr
                      streaming-0.1.4.0@strea_FSz849cBl1PCe6X22prWwo
                      syb-0.5.1@syb_8qmIMcBFhWM7BKRUTFb5M4 template-haskell-2.10.0.0
                      text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      time-1.5.0.1@time_ECG3PhVYxEUEM046TXoOWk
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
                      transformers-base-0.4.4@trans_88TAFm21vtn2NrYUppy50c
                      transient-0.1.1@trans_8wy0Qmgdmoq4PvxeKMd1Rs
                      unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a
                      vector-th-unbox-0.2.1.2@vecto_28hO2GSYRVb2wN023C4YYl
                      vector-binary-instances-0.2.1.0@vecto_4f6uxQmtb0E11de33Dn7EJ
                      vector-algorithms-0.7.0.1@vecto_6HuGpIkbES5Ew3alcl0UlC
                      vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ
orphans: aeson-0.8.0.2@aeson_8d2trNZtc6ABi2rBagqKNU:Data.Aeson.Types.Generic
         aeson-0.8.0.2@aeson_8d2trNZtc6ABi2rBagqKNU:Data.Aeson.Types.Instances
         attoparsec-0.12.1.6@attop_5hY081sve2m8WX8p1glGNS:Data.Attoparsec.ByteString.Char8
         base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy:Data.Hashable.Generic
         main@main:Data.Interface.TSequence
         monad-par-0.3.4.7@monad_Hv5if1BrtvzJUusTfn3zhD:Control.Monad.Par.Scheds.Trace
         stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr:Control.Monad.STM
         streaming-0.1.4.0@strea_FSz849cBl1PCe6X22prWwo:Streaming.Prelude
         syb-0.5.1@syb_8qmIMcBFhWM7BKRUTFb5M4:Data.Generics.Instances
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         time-1.5.0.1@time_ECG3PhVYxEUEM046TXoOWk:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_ECG3PhVYxEUEM046TXoOWk:Data.Time.Format.Parse
         time-1.5.0.1@time_ECG3PhVYxEUEM046TXoOWk:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
         vector-binary-instances-0.2.1.0@vecto_4f6uxQmtb0E11de33Dn7EJ:Data.Vector.Binary
         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Fusion.Stream
         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.12.1.6@attop_5hY081sve2m8WX8p1glGNS:Data.Attoparsec.Internal.Types
                         base-4.8.1.0:Control.Applicative base-4.8.1.0:Data.Either
                         base-4.8.1.0:Data.Functor.Identity base-4.8.1.0:Data.Monoid
                         base-4.8.1.0:Data.Type.Equality base-4.8.1.0:Data.Void
                         base-4.8.1.0:GHC.Exts base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         criterion-1.1.0.0@crite_E1zSWP2U5pWEkk1IdzykVe:Criterion.Main.Options
                         criterion-1.1.0.0@crite_E1zSWP2U5pWEkk1IdzykVe:Criterion.Report
                         criterion-1.1.0.0@crite_E1zSWP2U5pWEkk1IdzykVe:Criterion.Types
                         dlist-0.7.1.2@dlist_7AixcwRWCwX32HiPCcE7zz:Data.DList
                         math-functions-0.1.5.2@mathf_1zyIMc7z3P52XyDvEWek66:Numeric.Sum
                         monad-control-1.0.0.4@monad_3XCDr1mqlERGZgaxuwJF6b:Control.Monad.Trans.Control
                         mwc-random-0.13.3.2@mwcra_Lmxryx5XEB1ELstdFQVrRz:System.Random.MWC
                         pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_5Jnw7oEuYtM9dmKXelGXVb:Control.Monad.Primitive
                         resourcet-1.1.6@resou_Ic1TzDDmqYbFNHpzRsDmfS:Control.Monad.Trans.Resource.Internal
                         statistics-0.13.2.3@stati_EihyMT8kNnY7X8Dpk0kZVx:Statistics.Distribution.Normal
                         statistics-0.13.2.3@stati_EihyMT8kNnY7X8Dpk0kZVx:Statistics.Math.RootFinding
                         statistics-0.13.2.3@stati_EihyMT8kNnY7X8Dpk0kZVx:Statistics.Resampling
                         statistics-0.13.2.3@stati_EihyMT8kNnY7X8Dpk0kZVx:Statistics.Resampling.Bootstrap
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashSet
                         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector
                         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Primitive
                         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Storable
                         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Unboxed
                         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Unboxed.Base
import  -/  base-4.8.1.0:Control.Monad dfea142d91349c4861427789d50d5b80
import  -/  base-4.8.1.0:Data.Functor.Identity 3704ae224c8fe000710217d4c9932294
import  -/  base-4.8.1.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  criterion-1.1.0.0@crite_E1zSWP2U5pWEkk1IdzykVe:Criterion 5be775ce03e7c471744e32854452bef6
import  -/  criterion-1.1.0.0@crite_E1zSWP2U5pWEkk1IdzykVe:Criterion.Main 1e60a70624d02f77148ea164a05d2507
import  -/  criterion-1.1.0.0@crite_E1zSWP2U5pWEkk1IdzykVe:Criterion.Types b10d868c5e68425844ab9266fa9ea0d9
import  -/  deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o:Control.DeepSeq 73231efa4965af3664171f7884623f57
import  -/  free-vl-0.1.3@freev_J4QQawSJSgR1wtyx9RmpxN:Control.Monad.Free.VanLaarhovenE 1d548859c892b4905f1b7280918651d2
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  Base 4539c1b83b5f5c3bc3a6d6f65d743fb2
  exports: 8763dd5bae4f40ca274cc839ac61fcf9
  F 7cbec1f8f3194174f75be33e5b893b9f
  MonadFree 214a069f1b90a7dfdbb158c26b94063c
import  -/  Church 6144694aa9f72f888540b70b5c577514
  exports: 20b6977b4ff633a7e29528e71f8d040f
  run 991091315e6a4c8960cc8433c4b21728
import  -/  Codensity 998e470cee8025356c5f3bf0764234fa
  exports: 6755b6e277a176755fe3c7d75b89e6fa
  run 32cf2fca7fadf5b2252dfa1bff517a63
import  -/  Computation e54d7845af73419ca324eb3f999d9698
  exports: 52ba7e18025385811c9283697a5b072c
  computation 46ef0574e2ba70f4acbd177f81520cf9
  computation2 e7e204892b9a8057544d5a960a8e82a7
  mtlComputation2 63fbdcf498b034af3c0d966e45ea6e10
  mtlComputationGeneral f2c27c18de15db7d33f4486512fde686
  mtlComputationIO ae79f098c3de156b2497a9985dee98e5
  mtlComputationId fb4793f709e67159b1eca979d5dc4911
  tcomputation 37d6e6790e6314aac9f5a3e08a008d9e
  vl 5e40980a291bab9d06bf714cd3ac7697
  vlComputation 0691f5be76e267de5344cbe292b5a0fe
import  -/  Free 069f43e8af79f31a76118780d3291a01
  exports: edaba532e6f5b030b282aaf38146d7bb
  run 6f7ff988d41a671834135f8067707010
  runLazily e7c8c314b2916909574d48bfa222e301
import  -/  Freer 24425fd8326842e31741a0b61861d425
  exports: c3f7eab32885e9bd4378f22055a921c7
  run b6b4a95c2887dbc898fc42439fb86672
import  -/  NoRemorse 64642d3b7ac516b9e6716609af2f5709
  exports: 77007b5a8c3fd0dc88c4d9a781755318
  run 17d368fa6fd538faaf5911443c816793
import  -/  mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU:Control.Monad.State.Strict 16e19c2160f5c460b12f21dcee6c363c
import  -/  transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.State.Strict aa0a3204163086a4ba65dedf0c3a2fad
import  -/  transient-0.1.1@trans_8wy0Qmgdmoq4PvxeKMd1Rs:Transient.Base d947a32f0d5d3e3b15191008da27ffcc
32de07d371191a205bb8a96354b219ae
  $fNFDataEventF :: Control.DeepSeq.NFData Transient.Base.EventF
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fNFDataEventF_$crnf
                  `cast`
                (Sym (Control.DeepSeq.NTCo:NFData[0] <Transient.Base.EventF>_N)) -}
2cc85f89be9cfd212d98e2850fe528e8
  $fNFDataEventF_$crnf :: Transient.Base.EventF -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Transient.Base.EventF ->
                 case ds of ds1 { Transient.Base.EventF ipv0 ipv1 ipv ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ->
                 GHC.Tuple.() }) -}
eb1190446b225f1286b4bb7d01a4ea08
  $s$fApplicativeChurchFree ::
    GHC.Base.Applicative (Church.ChurchFree Base.F)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Church.ChurchFree Base.F)
                  (Church.$fFunctorChurchFree @ Base.F)
                  (Church.$fApplicativeChurchFree_$cpure
                     @ Base.F
                     (Church.$fFunctorChurchFree @ Base.F))
                  (Church.$fApplicativeChurchFree_$c<*>
                     @ Base.F
                     (Church.$fFunctorChurchFree @ Base.F))
                  (Church.$fApplicativeChurchFree_$c*>
                     @ Base.F
                     (Church.$fFunctorChurchFree @ Base.F))
                  (Church.$fApplicativeChurchFree_$c<*
                     @ Base.F
                     (Church.$fFunctorChurchFree @ Base.F)) -}
1d753bc28f1c1c1c0d4afcbecde140e4
  $s$fApplicativeCodensity ::
    GHC.Base.Applicative (Codensity.Codensity (Free.Free Base.F))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Codensity.Codensity (Free.Free Base.F))
                  (Codensity.$fFunctorCodensity @ (Free.Free Base.F))
                  (Codensity.$fApplicativeCodensity_$cpure
                     @ (Free.Free Base.F)
                     (Codensity.$fFunctorCodensity @ (Free.Free Base.F)))
                  (Codensity.$fApplicativeCodensity_$c<*>
                     @ (Free.Free Base.F)
                     (Codensity.$fFunctorCodensity @ (Free.Free Base.F)))
                  (Codensity.$fApplicativeCodensity_$c*>
                     @ (Free.Free Base.F)
                     (Codensity.$fFunctorCodensity @ (Free.Free Base.F)))
                  (Codensity.$fApplicativeCodensity_$c<*
                     @ (Free.Free Base.F)
                     (Codensity.$fFunctorCodensity @ (Free.Free Base.F))) -}
1f287f1308d79515347ba42d3bdb63ba
  $s$fApplicativeFree :: GHC.Base.Applicative (Freer.Free Base.F)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Freer.Free Base.F)
                  (Freer.$fFunctorFree @ Base.F)
                  Main.$s$fApplicativeFree_$s$fMonadFree_$creturn
                  (Freer.$fApplicativeFree_$c<*>
                     @ Base.F
                     (Freer.$fFunctorFree @ Base.F))
                  Main.$s$fApplicativeFree3
                  Main.$s$fApplicativeFree1 -}
f76ad2a3cdae0b8c5fdb34b7b90784d6
  $s$fApplicativeFree1 ::
    Freer.Free Base.F a -> Freer.Free Base.F b -> Freer.Free Base.F a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ @ a13
                   @ b
                   eta :: Freer.Free Base.F a13
                   eta1 :: Freer.Free Base.F b ->
                 Freer.$w$c>>=
                   @ Base.F
                   @ (b -> a13)
                   @ a13
                   (Freer.$w$c>>=
                      @ Base.F
                      @ a13
                      @ (b -> a13)
                      eta
                      (Main.$s$fApplicativeFree2 @ a13 @ b))
                   (\ x1 :: b -> a13 ->
                    Freer.$w$c>>=
                      @ Base.F
                      @ b
                      @ a13
                      eta1
                      (\ x2 :: b -> Freer.Pure @ Base.F @ a13 (x1 x2)))) -}
ac5b709babc34239dab78a10eca0c67f
  $s$fApplicativeFree2 :: a -> Freer.Free Base.F (b -> a)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a13 @ b x1 :: a13 ->
                 Freer.Pure @ Base.F @ (b -> a13) (\ ds :: b -> x1)) -}
fe7d598e4802b9570bfaed8091b997e2
  $s$fApplicativeFree3 ::
    Freer.Free Base.F a -> Freer.Free Base.F b -> Freer.Free Base.F b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ @ a13
                   @ b
                   eta :: Freer.Free Base.F a13
                   eta1 :: Freer.Free Base.F b ->
                 Freer.$w$c>>=
                   @ Base.F
                   @ (b -> b)
                   @ b
                   (Freer.$w$c>>=
                      @ Base.F
                      @ a13
                      @ (b -> b)
                      eta
                      (Main.$s$fApplicativeFree4 @ a13 @ b))
                   (\ x1 :: b -> b ->
                    Freer.$w$c>>=
                      @ Base.F
                      @ b
                      @ b
                      eta1
                      (\ x2 :: b -> Freer.Pure @ Base.F @ b (x1 x2)))) -}
f05e57d074579161725fd876401660a1
  $s$fApplicativeFree4 :: a -> Freer.Free Base.F (b -> b)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a13 @ b x1 :: a13 ->
                 Main.$s$fApplicativeFree5 @ b) -}
ebb3cfa23852816d9bfdfc067d9f068c
  $s$fApplicativeFree5 :: Freer.Free Base.F (b -> b)
  {- HasNoCafRefs,
     Unfolding: (\ @ b ->
                 Freer.Pure @ Base.F @ (b -> b) (GHC.Base.id @ b)) -}
175a9740d048e6ebbeb38168d9fab501
  $s$fApplicativeFree6 :: GHC.Base.Applicative (Free.Free Base.F)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Free.Free Base.F)
                  Main.$s$fApplicativeFree7
                  (Free.Pure @ Base.F)
                  (Free.$fApplicativeFree_$c<*>
                     @ Base.F
                     Main.$s$fApplicativeFree7
                     Base.$fFunctorF)
                  Main.$s$fApplicativeFree_$s$fApplicativeFree_$c*>
                  Main.$s$fApplicativeFree_$s$fApplicativeFree_$c<* -}
df674992f478f4d146e6033a9953b87a
  $s$fApplicativeFree7 :: GHC.Base.Functor (Free.Free Base.F)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeFree_$s$fFunctorFree -}
90d6ed4d8bff3ec58163b5701863f977
  $s$fApplicativeFreeMonad ::
    GHC.Base.Applicative (NoRemorse.FreeMonad Base.F)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (NoRemorse.FreeMonad Base.F)
                  (NoRemorse.$fFunctorFreeMonad @ Base.F)
                  Main.$s$fApplicativeFreeMonad_$s$fMonadFreeMonad_$creturn
                  (NoRemorse.$fApplicativeFreeMonad_$c<*>
                     @ Base.F
                     (NoRemorse.$fFunctorFreeMonad @ Base.F))
                  Main.$s$fApplicativeFreeMonad3
                  Main.$s$fApplicativeFreeMonad1 -}
fcd0cf28ea63e1fdc3f1dc00d5a8c41b
  $s$fApplicativeFreeMonad1 ::
    NoRemorse.FreeMonad Base.F a
    -> NoRemorse.FreeMonad Base.F b -> NoRemorse.FreeMonad Base.F a
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ @ a13
                   @ b
                   eta :: NoRemorse.FreeMonad Base.F a13
                   eta1 :: NoRemorse.FreeMonad Base.F b ->
                 NoRemorse.$fApplicativeFreeMonad_$c<*>
                   @ Base.F
                   (NoRemorse.$fFunctorFreeMonad @ Base.F)
                   @ b
                   @ a13
                   (NoRemorse.$w$c>>=
                      @ Base.F
                      @ a13
                      @ (b -> a13)
                      eta
                      (Main.$s$fApplicativeFreeMonad2 @ a13 @ b))
                   eta1) -}
d0ff45d495704fc834e428cef920545d
  $s$fApplicativeFreeMonad2 ::
    a -> NoRemorse.FreeMonad Base.F (b -> a)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a13 @ b x1 :: a13 ->
                 NoRemorse.FM
                   @ Base.F
                   @ (b -> a13)
                   @ (b -> a13)
                   (NoRemorse.Pure @ Base.F @ (b -> a13) (\ ds :: b -> x1))
                   (Data.CTQueue.$WC0
                      @ Data.RTQueue.RTQueue
                      @ (NoRemorse.FC Base.F)
                      @ (b -> a13))) -}
b30ac9c60ab419965422db2656277b76
  $s$fApplicativeFreeMonad3 ::
    NoRemorse.FreeMonad Base.F a
    -> NoRemorse.FreeMonad Base.F b -> NoRemorse.FreeMonad Base.F b
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ @ a13
                   @ b
                   eta :: NoRemorse.FreeMonad Base.F a13
                   eta1 :: NoRemorse.FreeMonad Base.F b ->
                 NoRemorse.$fApplicativeFreeMonad_$c<*>
                   @ Base.F
                   (NoRemorse.$fFunctorFreeMonad @ Base.F)
                   @ b
                   @ b
                   (NoRemorse.$w$c>>=
                      @ Base.F
                      @ a13
                      @ (b -> b)
                      eta
                      (Main.$s$fApplicativeFreeMonad4 @ a13 @ b))
                   eta1) -}
44ef9282c6c807398aa35f55ae7a6bd7
  $s$fApplicativeFreeMonad4 ::
    a -> NoRemorse.FreeMonad Base.F (b -> b)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a13 @ b x1 :: a13 ->
                 Main.$s$fApplicativeFreeMonad5 @ b) -}
f3ca12bfa215562b1ba1457df064cfff
  $s$fApplicativeFreeMonad5 :: NoRemorse.FreeMonad Base.F (b -> b)
  {- HasNoCafRefs,
     Unfolding: (\ @ b ->
                 NoRemorse.FM
                   @ Base.F
                   @ (b -> b)
                   @ (b -> b)
                   (Main.$s$fApplicativeFreeMonad6 @ b)
                   (Data.CTQueue.$WC0
                      @ Data.RTQueue.RTQueue
                      @ (NoRemorse.FC Base.F)
                      @ (b -> b))) -}
faaea82efea915c9352de36a05d62a03
  $s$fApplicativeFreeMonad6 ::
    NoRemorse.FreeMonadView Base.F (b -> b)
  {- HasNoCafRefs,
     Unfolding: (\ @ b ->
                 NoRemorse.Pure @ Base.F @ (b -> b) (GHC.Base.id @ b)) -}
448cb768c552c0a033d052e0834b4fc8
  $s$fApplicativeFreeMonad_$s$fMonadFreeMonad_$creturn ::
    a -> NoRemorse.FreeMonad Base.F a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                (NoRemorse.$fApplicativeFreeMonad2 @ Base.F) -}
21bf91ceb2c263a9def64b938b6921d4
  $s$fApplicativeFree_$s$fApplicativeFree_$c*> ::
    Free.Free Base.F a -> Free.Free Base.F b -> Free.Free Base.F b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a13
                   @ b
                   eta :: Free.Free Base.F a13
                   eta1 :: Free.Free Base.F b ->
                 Free.$fApplicativeFree_$c<*>
                   @ Base.F
                   Main.$s$fApplicativeFree7
                   Base.$fFunctorF
                   @ b
                   @ b
                   (Free.$fFunctorFree_$c<$
                      @ Base.F
                      Base.$fFunctorF
                      @ (b -> b)
                      @ a13
                      (GHC.Base.id @ b)
                      eta)
                   eta1) -}
d943610368336f9d09c54cea0e10f65d
  $s$fApplicativeFree_$s$fApplicativeFree_$c<* ::
    Free.Free Base.F a -> Free.Free Base.F b -> Free.Free Base.F a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a13
                   @ b
                   eta :: Free.Free Base.F a13
                   eta1 :: Free.Free Base.F b ->
                 letrec {
                   go :: Free.Free Base.F a13 -> Free.Free Base.F (b -> a13)
                     {- Arity: 1 -}
                   = \ ds :: Free.Free Base.F a13 ->
                     case ds of wild {
                       Free.Pure a14
                       -> Free.Pure @ Base.F @ (b -> a13) (GHC.Base.const @ a13 @ b a14)
                       Free.Free fa
                       -> Free.Free
                            @ Base.F
                            @ (b -> a13)
                            (Main.$s$fApplicativeFree_$s<$>
                               @ (Free.Free Base.F a13)
                               @ (Free.Free Base.F (b -> a13))
                               go
                               fa) }
                 } in
                 Free.$fApplicativeFree_$c<*>
                   @ Base.F
                   Main.$s$fApplicativeFree7
                   Base.$fFunctorF
                   @ b
                   @ a13
                   (go eta)
                   eta1) -}
b80879158d3888a9e6eaa9ec5ac98457
  $s$fApplicativeFree_$s$fFunctorFree ::
    GHC.Base.Functor (Free.Free Base.F)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Free.Free Base.F)
                  Main.$s$fApplicativeFree_$s$fFunctorFree_$cfmap
                  (Free.$fFunctorFree_$c<$ @ Base.F Base.$fFunctorF) -}
3885df49e27fd78a552f6509ac73ba0a
  $s$fApplicativeFree_$s$fFunctorFree_$cfmap ::
    (a -> b) -> Free.Free Base.F a -> Free.Free Base.F b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a13 @ b f1 :: a13 -> b eta :: Free.Free Base.F a13 ->
                 letrec {
                   go :: Free.Free Base.F a13 -> Free.Free Base.F b {- Arity: 1 -}
                   = \ ds :: Free.Free Base.F a13 ->
                     case ds of wild {
                       Free.Pure a14 -> Free.Pure @ Base.F @ b (f1 a14)
                       Free.Free fa
                       -> Free.Free
                            @ Base.F
                            @ b
                            (Main.$s$fApplicativeFree_$s<$>
                               @ (Free.Free Base.F a13)
                               @ (Free.Free Base.F b)
                               go
                               fa) }
                 } in
                 go eta) -}
797f09443ce4259da04f6c38077459d0
  $s$fApplicativeFree_$s$fMonadFree_$creturn ::
    a -> Freer.Free Base.F a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m1,
     Unfolding: InlineRule (0, True, True) (Freer.Pure @ Base.F) -}
50f92316ea2ea4c683816724be4e51d9
  $s$fApplicativeFree_$s<$> :: (a -> b) -> Base.F a -> Base.F b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(C(U(U,U)))>m,
     Unfolding: InlineRule (0, True, True) Base.$fFunctorF_$cfmap -}
451ee00f452e73500da92982e5d4dc77
  $s$fMonadChurchFree :: GHC.Base.Monad (Church.ChurchFree Base.F)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Church.ChurchFree Base.F)
                  Main.$s$fMonadChurchFree2
                  Main.$s$fMonadChurchFree_$s$fMonadChurchFree_$c>>=
                  Main.$s$fMonadChurchFree_$s$fMonadChurchFree_$c>>
                  Main.$s$fMonadChurchFree_$s$fMonadChurchFree_$creturn
                  Main.$s$fMonadChurchFree1 -}
563176d99d965c39917bd00de934b778
  $s$fMonadChurchFree1 ::
    GHC.Base.String -> Church.ChurchFree Base.F a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a13 eta :: [GHC.Types.Char] ->
                 GHC.Err.error @ (Church.ChurchFree Base.F a13) eta) -}
4f1fd690ecd9bf9c0b6eac24c909a737
  $s$fMonadChurchFree2 ::
    GHC.Base.Applicative (Church.ChurchFree Base.F)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeChurchFree -}
924ecdd544182e158a9ae08d2d411ed0
  $s$fMonadChurchFree_$s$fMonadChurchFree_$c>> ::
    Church.ChurchFree Base.F a
    -> Church.ChurchFree Base.F b -> Church.ChurchFree Base.F b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a13
                   @ b
                   m1 :: Church.ChurchFree Base.F a13
                   k :: Church.ChurchFree Base.F b ->
                 GHC.Base.$
                   @ (forall w. (b -> w) -> (Base.F w -> w) -> w)
                   @ (Church.ChurchFree Base.F b)
                   (\ tpl :: forall w. (b -> w) -> (Base.F w -> w) -> w -> tpl)
                     `cast`
                   (<forall w. (b -> w) -> (Base.F w -> w) -> w>_R
                    ->_R Sym (Church.NTCo:ChurchFree[0] <Base.F>_R <b>_R))
                   (\ @ w ret :: b -> w emb :: Base.F w -> w ->
                    Church.runChurchFree
                      @ Base.F
                      @ a13
                      @ w
                      m1
                      (\ v :: a13 -> Church.runChurchFree @ Base.F @ b @ w k ret emb)
                      emb)) -}
608e17d50f80f119033be74a3267d054
  $s$fMonadChurchFree_$s$fMonadChurchFree_$c>>= ::
    Church.ChurchFree Base.F a
    -> (a -> Church.ChurchFree Base.F b) -> Church.ChurchFree Base.F b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,C(C1(C1(U)))><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a13
                   @ b
                   m :: Church.ChurchFree Base.F a13
                   f1 :: a13 -> Church.ChurchFree Base.F b ->
                 GHC.Base.$
                   @ (forall w. (b -> w) -> (Base.F w -> w) -> w)
                   @ (Church.ChurchFree Base.F b)
                   (\ tpl :: forall w. (b -> w) -> (Base.F w -> w) -> w -> tpl)
                     `cast`
                   (<forall w. (b -> w) -> (Base.F w -> w) -> w>_R
                    ->_R Sym (Church.NTCo:ChurchFree[0] <Base.F>_R <b>_R))
                   (\ @ w ret :: b -> w emb :: Base.F w -> w ->
                    Church.runChurchFree
                      @ Base.F
                      @ a13
                      @ w
                      m
                      (\ v :: a13 ->
                       Church.runChurchFree @ Base.F @ b @ w (f1 v) ret emb)
                      emb)) -}
c74001157d711a7c09debf0b2743217c
  $s$fMonadChurchFree_$s$fMonadChurchFree_$creturn ::
    a -> Church.ChurchFree Base.F a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)><L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a13 x :: a13 ->
                 GHC.Base.$
                   @ (forall w. (a13 -> w) -> (Base.F w -> w) -> w)
                   @ (Church.ChurchFree Base.F a13)
                   (\ tpl :: forall w. (a13 -> w) -> (Base.F w -> w) -> w -> tpl)
                     `cast`
                   (<forall w. (a13 -> w) -> (Base.F w -> w) -> w>_R
                    ->_R Sym (Church.NTCo:ChurchFree[0] <Base.F>_R <a13>_R))
                   (\ @ w ret :: a13 -> w ds :: Base.F w -> w -> ret x)) -}
886b54a3591469bb48213703671ac7c3
  $s$fMonadCodensity ::
    GHC.Base.Monad (Codensity.Codensity (Free.Free Base.F))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Codensity.Codensity (Free.Free Base.F))
                  Main.$s$fMonadCodensity2
                  (Codensity.$fMonadCodensity_$c>>=
                     @ (Free.Free Base.F)
                     Main.$s$fMonadCodensity2)
                  (Codensity.$fMonadCodensity_$c>>
                     @ (Free.Free Base.F)
                     Main.$s$fMonadCodensity2)
                  (Codensity.$fMonadCodensity_$creturn
                     @ (Free.Free Base.F)
                     Main.$s$fMonadCodensity2)
                  Main.$s$fMonadCodensity1 -}
d05c3e37cd3e6a128c2711a8d1958932
  $s$fMonadCodensity1 ::
    GHC.Base.String -> Codensity.Codensity (Free.Free Base.F) a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a13 eta :: [GHC.Types.Char] ->
                 GHC.Err.error
                   @ (Codensity.Codensity (Free.Free Base.F) a13)
                   eta) -}
62c422dda2af0bf66d3cccb672b7e4b1
  $s$fMonadCodensity2 ::
    GHC.Base.Applicative (Codensity.Codensity (Free.Free Base.F))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeCodensity -}
868792e53f65fe3988e1f877e339c8af
  $s$fMonadFree :: GHC.Base.Monad (Freer.Free Base.F)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Freer.Free Base.F)
                  Main.$s$fMonadFree2
                  (Freer.$fMonadFree_$c>>= @ Base.F Main.$s$fMonadFree2)
                  Main.$s$fMonadFree_$s$fMonadFree_$c>>
                  Main.$s$fApplicativeFree_$s$fMonadFree_$creturn
                  Main.$s$fMonadFree1 -}
40296724ae3efa7f1bd8a2049ace621d
  $s$fMonadFree1 :: GHC.Base.String -> Freer.Free Base.F a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a13 eta :: [GHC.Types.Char] ->
                 GHC.Err.error @ (Freer.Free Base.F a13) eta) -}
84dfd61d920c8c40fe205ad3d32d390e
  $s$fMonadFree2 :: GHC.Base.Applicative (Freer.Free Base.F)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fApplicativeFree -}
c817f17dc3ffaa13d948576c266270e5
  $s$fMonadFree3 :: GHC.Base.Monad (Free.Free Base.F)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Free.Free Base.F)
                  Main.$s$fMonadFree5
                  (Free.$fMonadFree_$c>>=
                     @ Base.F
                     Main.$s$fMonadFree5
                     Base.$fFunctorF)
                  Main.$s$fMonadFree_$s$fMonadFree_$c>>1
                  (Free.Pure @ Base.F)
                  Main.$s$fMonadFree4 -}
6a6a9b91dd5f51babbca488f7fd480e6
  $s$fMonadFree4 :: GHC.Base.String -> Free.Free Base.F a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a13 eta :: [GHC.Types.Char] ->
                 GHC.Err.error @ (Free.Free Base.F a13) eta) -}
bbc20a2f317f118b23f5e3cfd1a1fbf0
  $s$fMonadFree5 :: GHC.Base.Applicative (Free.Free Base.F)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fApplicativeFree6 -}
02dde10253a34107f28e612ef3e796f4
  $s$fMonadFreeMonad :: GHC.Base.Monad (NoRemorse.FreeMonad Base.F)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (NoRemorse.FreeMonad Base.F)
                  Main.$s$fMonadFreeMonad2
                  (NoRemorse.$fMonadFreeMonad_$c>>=
                     @ Base.F
                     Main.$s$fMonadFreeMonad2)
                  Main.$s$fMonadFreeMonad_$s$fMonadFreeMonad_$c>>
                  Main.$s$fApplicativeFreeMonad_$s$fMonadFreeMonad_$creturn
                  Main.$s$fMonadFreeMonad1 -}
dc2ad7dc8373987d390e7ea75078c40d
  $s$fMonadFreeMonad1 ::
    GHC.Base.String -> NoRemorse.FreeMonad Base.F a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a13 eta :: [GHC.Types.Char] ->
                 GHC.Err.error @ (NoRemorse.FreeMonad Base.F a13) eta) -}
78a3bc4d7ad0ef1d74b7b4d6d62ecf7d
  $s$fMonadFreeMonad2 ::
    GHC.Base.Applicative (NoRemorse.FreeMonad Base.F)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeFreeMonad -}
cda75d9b78f5d6fcc761f5e41616bedb
  $s$fMonadFreeMonad_$s$fMonadFreeMonad_$c>> ::
    NoRemorse.FreeMonad Base.F a
    -> NoRemorse.FreeMonad Base.F b -> NoRemorse.FreeMonad Base.F b
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a13
                   @ b
                   m1 :: NoRemorse.FreeMonad Base.F a13
                   k :: NoRemorse.FreeMonad Base.F b ->
                 NoRemorse.$fMonadFreeMonad_$c>>=
                   @ Base.F
                   Main.$s$fMonadFreeMonad2
                   @ a13
                   @ b
                   m1
                   (\ ds :: a13 -> k)) -}
a9c3c2e1403b397e6a6e9e73eaab3003
  $s$fMonadFree_$s$fMonadFree_$c>> ::
    Freer.Free Base.F a -> Freer.Free Base.F b -> Freer.Free Base.F b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a13
                   @ b
                   m1 :: Freer.Free Base.F a13
                   k :: Freer.Free Base.F b ->
                 Freer.$fMonadFree_$c>>=
                   @ Base.F
                   Main.$s$fMonadFree2
                   @ a13
                   @ b
                   m1
                   (\ ds :: a13 -> k)) -}
4bec66e346a73f42ebc940b60c7bedba
  $s$fMonadFree_$s$fMonadFree_$c>>1 ::
    Free.Free Base.F a -> Free.Free Base.F b -> Free.Free Base.F b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a13 @ b m1 :: Free.Free Base.F a13 k :: Free.Free Base.F b ->
                 Free.$fMonadFree_$c>>=
                   @ Base.F
                   Main.$s$fMonadFree5
                   Base.$fFunctorF
                   @ a13
                   @ b
                   m1
                   (\ ds :: a13 -> k)) -}
58c488c23f19667982d3245047266770
  $s$fMonadFreefChurchFree ::
    Base.MonadFree Base.F (Church.ChurchFree Base.F)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Base.F
                  @ (Church.ChurchFree Base.F)
                  Main.$s$fMonadFreefChurchFree1
                  (Church.$fMonadFreefChurchFree_$cwrap
                     @ Base.F
                     Main.$s$fMonadFreefChurchFree1
                     Base.$fFunctorF) -}
0a803ddb011b8c8bedacddaa182a12e3
  $s$fMonadFreefChurchFree1 ::
    GHC.Base.Monad (Church.ChurchFree Base.F)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fMonadChurchFree -}
228ca9dcfa91a259e014b2faf0a60220
  $s$fMonadFreefCodensity ::
    Base.MonadFree Base.F (Codensity.Codensity (Free.Free Base.F))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Base.F
                  @ (Codensity.Codensity (Free.Free Base.F))
                  Main.$s$fMonadFreefCodensity1
                  (Codensity.$fMonadFreefCodensity_$cwrap
                     @ Base.F
                     Main.$s$fMonadFreefCodensity1
                     Base.$fFunctorF) -}
a4d9905c6bab78bf4b09c9089e26f0cf
  $s$fMonadFreefCodensity1 ::
    GHC.Base.Monad (Codensity.Codensity (Free.Free Base.F))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fMonadCodensity -}
3476c6fd7f2559afe55f4a7d1519c48f
  $s$fMonadFreefFree :: Base.MonadFree Base.F (Freer.Free Base.F)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Base.F
                  @ (Freer.Free Base.F)
                  Main.$s$fMonadFreefFree2
                  Main.$s$fMonadFreefFree1 -}
4c3f8783bf7ababf5d20aa9b15bb7bf9
  $s$fMonadFreefFree1 ::
    Base.F (Freer.Free Base.F a) -> Freer.Free Base.F a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a13 a14 :: Base.F (Freer.Free Base.F a13) ->
                 Freer.Impure
                   @ Base.F
                   @ a13
                   @ (Freer.Free Base.F a13)
                   a14
                   (GHC.Base.id @ (Freer.Free Base.F a13))) -}
5ed3886e60a14c7f18cd4ee62741127a
  $s$fMonadFreefFree2 :: GHC.Base.Monad (Freer.Free Base.F)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fMonadFree -}
68fe5473b6350658d8baf1516a56b543
  $s$fMonadFreefFree3 :: Base.MonadFree Base.F (Free.Free Base.F)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Base.F
                  @ (Free.Free Base.F)
                  Main.$s$fMonadFreefFree4
                  Main.$s$fMonadFreefFree_$s$fMonadFreefFree_$cwrap -}
7fcb157fa6996a3adacb9f3c989dd45e
  $s$fMonadFreefFree4 :: GHC.Base.Monad (Free.Free Base.F)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fMonadFree3 -}
d2d04f3f713e6e6048933292a6ec47de
  $s$fMonadFreefFreeMonad ::
    Base.MonadFree Base.F (NoRemorse.FreeMonad Base.F)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Base.F
                  @ (NoRemorse.FreeMonad Base.F)
                  Main.$s$fMonadFreefFreeMonad2
                  Main.$s$fMonadFreefFreeMonad1 -}
162f58151900d774dee2259b0233b012
  $s$fMonadFreefFreeMonad1 ::
    Base.F (NoRemorse.FreeMonad Base.F a)
    -> NoRemorse.FreeMonad Base.F a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a13 a14 :: Base.F (NoRemorse.FreeMonad Base.F a13) ->
                 NoRemorse.FM
                   @ Base.F
                   @ a13
                   @ a13
                   (NoRemorse.Impure @ Base.F @ a13 a14)
                   (Data.CTQueue.$WC0
                      @ Data.RTQueue.RTQueue
                      @ (NoRemorse.FC Base.F)
                      @ a13)) -}
506c4d4b1b8bd68708dbb658d5f9d6d2
  $s$fMonadFreefFreeMonad2 ::
    GHC.Base.Monad (NoRemorse.FreeMonad Base.F)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fMonadFreeMonad -}
6643937aa80db4c47a2470103994d60a
  $s$fMonadFreefFree_$s$fMonadFreefFree_$cwrap ::
    Base.F (Free.Free Base.F a) -> Free.Free Base.F a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True) (Free.Free @ Base.F) -}
31e45d916e639c3acc0ea4b925e94268
  $wbenchmarks ::
    (forall (m :: * -> *).
     (GHC.Base.Monad m, Base.MonadFree Base.F m) =>
     GHC.Types.Int -> m ())
    -> GHC.Types.Int
    -> (# Criterion.Types.Benchmark, [Criterion.Types.Benchmark] #)
  {- Arity: 2, Strictness: <L,C(C1(U))><L,U(U)>, Inline: [0] -}
870aa8b3adfe2df8d4f0c92692f0ccfe
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
7b565244cefae5ffd324d4effec0ed16
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Criterion.Main.defaultMain2
                   Criterion.Main.Options.defaultConfig
                   Main.main2) -}
a5b4f307a0814e9c7bbf5b3319d57a49
  main10 ::
    (GHC.Base.Monad m, Base.MonadFree Base.F m) =>
    GHC.Types.Int -> m ()
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ @ (m :: * -> *)
                   $dMonad :: GHC.Base.Monad m
                   $dMonadFree :: Base.MonadFree Base.F m[OneShot]
                   eta :: GHC.Types.Int ->
                 case eta of ww { GHC.Types.I# ww1 ->
                 Computation.$wcomputation @ m $dMonadFree ww1 }) -}
25ca8383d0a878a2705e50bbe60862fe
  main11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Right-assoc"#) -}
5b773602c04722d2cf421168d9f2b20f
  main12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
6b0b7f7ed77c6d1a6ed63b70087b7d4f
  main2 :: [Criterion.Types.Benchmark]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Criterion.Types.Benchmark
                   Main.main8
                   Main.main3) -}
ae82f0dc9b4f6d6b9ac8244aedc2df79
  main3 :: [Criterion.Types.Benchmark]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Criterion.Types.Benchmark
                   Main.main4
                   (GHC.Types.[] @ Criterion.Types.Benchmark)) -}
ac8948641e0d17907cd8090f69e6f129
  main4 :: Criterion.Types.Benchmark
  {- Strictness: m3,
     Unfolding: (Criterion.Types.BenchGroup Main.main7 Main.main5) -}
3f430052b602e07e754dddb1a632bb97
  main5 :: [Criterion.Types.Benchmark]
  {- Unfolding: (case Main.$wbenchmarks
                        Main.main6
                        Main.n of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ Criterion.Types.Benchmark ww1 ww2 }) -}
7c8c7058b579fa6d04646ec4dbe70d9c
  main6 ::
    (GHC.Base.Monad m, Base.MonadFree Base.F m) =>
    GHC.Types.Int -> m ()
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ @ (m :: * -> *)
                   $dMonad :: GHC.Base.Monad m
                   $dMonadFree :: Base.MonadFree Base.F m[OneShot]
                   eta :: GHC.Types.Int ->
                 case eta of ww { GHC.Types.I# ww1 ->
                 Computation.$wcomputation2 @ m $dMonadFree ww1 }) -}
24a8c182d9bfb09f0dbc67e858bf45b0
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Left-assoc"#) -}
f607808f0277d60c632ce02bd86ca615
  main8 :: Criterion.Types.Benchmark
  {- Strictness: m3,
     Unfolding: (Criterion.Types.BenchGroup Main.main11 Main.main9) -}
635e37fcf180fa608612705c9a6911b1
  main9 :: [Criterion.Types.Benchmark]
  {- Unfolding: (case Main.$wbenchmarks
                        Main.main10
                        Main.n of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ Criterion.Types.Benchmark ww1 ww2 }) -}
30714f79bf3a738c04e535dc1d8ee12e
  n :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 50) -}
instance Control.DeepSeq.NFData [Transient.Base.EventF]
  = Main.$fNFDataEventF
"SPEC/Main $fApplicativeChurchFree @ F" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                       (Church.ChurchFree Base.F)
  Church.$fApplicativeChurchFree @ Base.F $dFunctor
  = Main.$s$fApplicativeChurchFree
"SPEC/Main $fApplicativeCodensity @ (Free F)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                             (Codensity.Codensity
                                                                                (Free.Free Base.F))
  Codensity.$fApplicativeCodensity @ (Free.Free Base.F) $dFunctor
  = Main.$s$fApplicativeCodensity
"SPEC/Main $fApplicativeFree @ F" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                 (Free.Free Base.F)
                                                  $dFunctor1 :: GHC.Base.Functor Base.F
  Free.$fApplicativeFree @ Base.F $dFunctor $dFunctor1
  = Main.$s$fApplicativeFree6
"SPEC/Main $fApplicativeFree @ F" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                 (Freer.Free Base.F)
  Freer.$fApplicativeFree @ Base.F $dFunctor
  = Main.$s$fApplicativeFree
"SPEC/Main $fApplicativeFreeMonad @ F" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                      (NoRemorse.FreeMonad Base.F)
  NoRemorse.$fApplicativeFreeMonad @ Base.F $dFunctor
  = Main.$s$fApplicativeFreeMonad
"SPEC/Main $fApplicativeFree_$c*> @ F" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                      (Free.Free Base.F)
                                                       $dFunctor1 :: GHC.Base.Functor Base.F
  Free.$fApplicativeFree_$c*> @ Base.F $dFunctor $dFunctor1
  = Main.$s$fApplicativeFree_$s$fApplicativeFree_$c*>
"SPEC/Main $fApplicativeFree_$c<* @ F" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                      (Free.Free Base.F)
                                                       $dFunctor1 :: GHC.Base.Functor Base.F
  Free.$fApplicativeFree_$c<* @ Base.F $dFunctor $dFunctor1
  = Main.$s$fApplicativeFree_$s$fApplicativeFree_$c<*
"SPEC/Main $fFunctorFree @ F" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                             Base.F
  Free.$fFunctorFree @ Base.F $dFunctor
  = Main.$s$fApplicativeFree_$s$fFunctorFree
"SPEC/Main $fFunctorFree_$cfmap @ F" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                    Base.F
  Free.$fFunctorFree_$cfmap @ Base.F $dFunctor
  = Main.$s$fApplicativeFree_$s$fFunctorFree_$cfmap
"SPEC/Main $fMonadChurchFree @ F" [ALWAYS] forall $dApplicative1 :: GHC.Base.Applicative
                                                                      (Church.ChurchFree Base.F)
  Church.$fMonadChurchFree @ Base.F $dApplicative1
  = Main.$s$fMonadChurchFree
"SPEC/Main $fMonadChurchFree_$c>> @ F" [ALWAYS] forall $dApplicative1 :: GHC.Base.Applicative
                                                                           (Church.ChurchFree
                                                                              Base.F)
  Church.$fMonadChurchFree_$c>> @ Base.F $dApplicative1
  = Main.$s$fMonadChurchFree_$s$fMonadChurchFree_$c>>
"SPEC/Main $fMonadChurchFree_$c>>= @ F" [ALWAYS] forall $dApplicative1 :: GHC.Base.Applicative
                                                                            (Church.ChurchFree
                                                                               Base.F)
  Church.$fMonadChurchFree_$c>>= @ Base.F $dApplicative1
  = Main.$s$fMonadChurchFree_$s$fMonadChurchFree_$c>>=
"SPEC/Main $fMonadChurchFree_$creturn @ F" [ALWAYS] forall $dApplicative1 :: GHC.Base.Applicative
                                                                               (Church.ChurchFree
                                                                                  Base.F)
  Church.$fMonadChurchFree_$creturn @ Base.F $dApplicative1
  = Main.$s$fMonadChurchFree_$s$fMonadChurchFree_$creturn
"SPEC/Main $fMonadCodensity @ (Free F)" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                           (Codensity.Codensity
                                                                              (Free.Free Base.F))
  Codensity.$fMonadCodensity @ (Free.Free Base.F) $dApplicative
  = Main.$s$fMonadCodensity
"SPEC/Main $fMonadFree @ F" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                               (Free.Free Base.F)
                                            $dFunctor :: GHC.Base.Functor Base.F
  Free.$fMonadFree @ Base.F $dApplicative $dFunctor
  = Main.$s$fMonadFree3
"SPEC/Main $fMonadFree @ F" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                               (Freer.Free Base.F)
  Freer.$fMonadFree @ Base.F $dApplicative = Main.$s$fMonadFree
"SPEC/Main $fMonadFreeMonad @ F" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                    (NoRemorse.FreeMonad Base.F)
  NoRemorse.$fMonadFreeMonad @ Base.F $dApplicative
  = Main.$s$fMonadFreeMonad
"SPEC/Main $fMonadFreeMonad_$c>> @ F" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                         (NoRemorse.FreeMonad
                                                                            Base.F)
  NoRemorse.$fMonadFreeMonad_$c>> @ Base.F $dApplicative
  = Main.$s$fMonadFreeMonad_$s$fMonadFreeMonad_$c>>
"SPEC/Main $fMonadFreeMonad_$creturn @ F" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                             (NoRemorse.FreeMonad
                                                                                Base.F)
  NoRemorse.$fMonadFreeMonad_$creturn @ Base.F $dApplicative
  = Main.$s$fApplicativeFreeMonad_$s$fMonadFreeMonad_$creturn
"SPEC/Main $fMonadFree_$c>> @ F" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                    (Free.Free Base.F)
                                                 $dFunctor :: GHC.Base.Functor Base.F
  Free.$fMonadFree_$c>> @ Base.F $dApplicative $dFunctor
  = Main.$s$fMonadFree_$s$fMonadFree_$c>>1
"SPEC/Main $fMonadFree_$c>> @ F" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                    (Freer.Free Base.F)
  Freer.$fMonadFree_$c>> @ Base.F $dApplicative
  = Main.$s$fMonadFree_$s$fMonadFree_$c>>
"SPEC/Main $fMonadFree_$creturn @ F" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                        (Freer.Free Base.F)
  Freer.$fMonadFree_$creturn @ Base.F $dApplicative
  = Main.$s$fApplicativeFree_$s$fMonadFree_$creturn
"SPEC/Main $fMonadFreefChurchFree @ F" [ALWAYS] forall $dMonad1 :: GHC.Base.Monad
                                                                     (Church.ChurchFree Base.F)
                                                       $dFunctor :: GHC.Base.Functor Base.F
  Church.$fMonadFreefChurchFree @ Base.F $dMonad1 $dFunctor
  = Main.$s$fMonadFreefChurchFree
"SPEC/Main $fMonadFreefCodensity @ F" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                   (Codensity.Codensity
                                                                      (Free.Free Base.F))
                                                      $dFunctor :: GHC.Base.Functor Base.F
  Codensity.$fMonadFreefCodensity @ Base.F $dMonad $dFunctor
  = Main.$s$fMonadFreefCodensity
"SPEC/Main $fMonadFreefFree @ F" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                              (Free.Free Base.F)
                                                 $dFunctor :: GHC.Base.Functor Base.F
  Free.$fMonadFreefFree @ Base.F $dMonad $dFunctor
  = Main.$s$fMonadFreefFree3
"SPEC/Main $fMonadFreefFree @ F" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                              (Freer.Free Base.F)
                                                 $dFunctor :: GHC.Base.Functor Base.F
  Freer.$fMonadFreefFree @ Base.F $dMonad $dFunctor
  = Main.$s$fMonadFreefFree
"SPEC/Main $fMonadFreefFreeMonad @ F" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                   (NoRemorse.FreeMonad Base.F)
  NoRemorse.$fMonadFreefFreeMonad @ Base.F $dMonad
  = Main.$s$fMonadFreefFreeMonad
"SPEC/Main $fMonadFreefFree_$cwrap @ F" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                     (Free.Free Base.F)
                                                        $dFunctor :: GHC.Base.Functor Base.F
  Free.$fMonadFreefFree_$cwrap @ Base.F $dMonad $dFunctor
  = Main.$s$fMonadFreefFree_$s$fMonadFreefFree_$cwrap
"SPEC/Main <$> _ _ @ F" [ALWAYS] forall @ a13
                                        @ b
                                        $dFunctor :: GHC.Base.Functor Base.F
  Data.Functor.<$> @ a13 @ b @ Base.F $dFunctor
  = Main.$s$fApplicativeFree_$s<$> @ a13 @ b
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

