
==================== FINAL INTERFACE ====================
2016-01-04 15:50:41.0987592 UTC

interface main@main:Church 7102
  interface hash: 2aa278cf8cdceb7304f33bae28278a3d
  ABI hash: 6144694aa9f72f888540b70b5c577514
  export-list hash: 20b6977b4ff633a7e29528e71f8d040f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 3c94a6bf0aae245c33f077efd5ccc103
  sig of: Nothing
  used TH splices: False
  where
exports:
  Church.run
  Church.ChurchFree{Church.ChurchFree Church.runChurchFree}
module dependencies: Base
package dependencies: Win32-2.3.1.0@Win32_JH0ECVJdFmmG0JOvttvGqi
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ base-4.8.1.0
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      exceptions-0.8.0.2@excep_8GsEeHgaIks3pVGk6GaELJ ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
                      lifted-base-0.2.3.6@lifte_K3cQFA6mRg85rpDaA9numU
                      mmorph-1.0.4@mmorp_8dNpUU8QFPe77rrwKAb20b
                      monad-control-1.0.0.4@monad_3XCDr1mqlERGZgaxuwJF6b
                      mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      resourcet-1.1.6@resou_Ic1TzDDmqYbFNHpzRsDmfS
                      stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr
                      streaming-0.1.4.0@strea_FSz849cBl1PCe6X22prWwo
                      time-1.5.0.1@time_ECG3PhVYxEUEM046TXoOWk
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
                      transformers-base-0.4.4@trans_88TAFm21vtn2NrYUppy50c
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr:Control.Monad.STM
         streaming-0.1.4.0@strea_FSz849cBl1PCe6X22prWwo:Streaming.Prelude
         time-1.5.0.1@time_ECG3PhVYxEUEM046TXoOWk:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_ECG3PhVYxEUEM046TXoOWk:Data.Time.Format.Parse
         time-1.5.0.1@time_ECG3PhVYxEUEM046TXoOWk:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         monad-control-1.0.0.4@monad_3XCDr1mqlERGZgaxuwJF6b:Control.Monad.Trans.Control
                         resourcet-1.1.6@resou_Ic1TzDDmqYbFNHpzRsDmfS:Control.Monad.Trans.Resource.Internal
import  -/  base-4.8.1.0:Control.Applicative a283901553892ce761385d18e455c2ce
import  -/  base-4.8.1.0:Control.Monad dfea142d91349c4861427789d50d5b80
import  -/  base-4.8.1.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  Base 4539c1b83b5f5c3bc3a6d6f65d743fb2
  exports: 8763dd5bae4f40ca274cc839ac61fcf9
  F 7cbec1f8f3194174f75be33e5b893b9f
  MonadFree 214a069f1b90a7dfdbb158c26b94063c
  unF 644f08ccbaffbc1cadd53660d2c7f06d
  wrap 934c5269797907e84f278b415b88a6c3
424c68687a987f8280ebaa82041df6c1
  $fApplicativeChurchFree ::
    GHC.Base.Functor (Church.ChurchFree f) =>
    GHC.Base.Applicative (Church.ChurchFree f)
  DFunId[1]
  {- Arity: 1, Strictness: <L,U(U,U)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      $dFunctor :: GHC.Base.Functor (Church.ChurchFree f).
                  @ (Church.ChurchFree f)
                  $dFunctor
                  (Church.$fApplicativeChurchFree_$cpure @ f $dFunctor)
                  (Church.$fApplicativeChurchFree_$c<*> @ f $dFunctor)
                  (Church.$fApplicativeChurchFree_$c*> @ f $dFunctor)
                  (Church.$fApplicativeChurchFree_$c<* @ f $dFunctor) -}
424c68687a987f8280ebaa82041df6c1
  $fApplicativeChurchFree1 ::
    GHC.Base.Functor (Church.ChurchFree f) =>
    forall a b.
    Church.ChurchFree f (a -> b)
    -> Church.ChurchFree f a -> forall w. (b -> w) -> (f w -> w) -> w
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><C(C(S)),1*C1(C1(U))><L,C(C1(U))><L,C(U)><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor (Church.ChurchFree f)
                   @ a2
                   @ b
                   m1 :: Church.ChurchFree f (a2 -> b)
                   m2 :: Church.ChurchFree f a2
                   @ w
                   eta :: b -> w
                   eta1 :: f w -> w ->
                 m1 `cast` (Church.NTCo:ChurchFree[0] <f>_R <a2 -> b>_R)
                   @ w
                   (\ v :: a2 -> b ->
                    m2 `cast` (Church.NTCo:ChurchFree[0] <f>_R <a2>_R)
                      @ w
                      (\ v1 :: a2 -> eta (v v1))
                      eta1)
                   eta1) -}
424c68687a987f8280ebaa82041df6c1
  $fApplicativeChurchFree_$c*> ::
    GHC.Base.Functor (Church.ChurchFree f) =>
    forall a b.
    Church.ChurchFree f a
    -> Church.ChurchFree f b -> Church.ChurchFree f b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)))><L,U><L,C(C1(U))>,
     Unfolding: (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor (Church.ChurchFree f)
                   @ a2
                   @ b
                   eta :: Church.ChurchFree f a2
                   eta1 :: Church.ChurchFree f b ->
                 let {
                   m1 :: Church.ChurchFree f (b -> b)
                   = GHC.Base.<$
                       @ (Church.ChurchFree f)
                       $dFunctor
                       @ (b -> b)
                       @ a2
                       (GHC.Base.id @ b)
                       eta
                 } in
                 (\ @ w eta2 :: b -> w eta3 :: f w -> w ->
                  m1 `cast` (Church.NTCo:ChurchFree[0] <f>_R <b -> b>_R)
                    @ w
                    (\ v :: b -> b ->
                     eta1 `cast` (Church.NTCo:ChurchFree[0] <f>_R <b>_R)
                       @ w
                       (\ v1 :: b -> eta2 (v v1))
                       eta3)
                    eta3)
                   `cast`
                 (Sym (Church.NTCo:ChurchFree[0] <f>_R <b>_R))) -}
424c68687a987f8280ebaa82041df6c1
  $fApplicativeChurchFree_$c<* ::
    GHC.Base.Functor (Church.ChurchFree f) =>
    forall a b.
    Church.ChurchFree f a
    -> Church.ChurchFree f b -> Church.ChurchFree f a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,U><L,C(C1(U))>,
     Unfolding: (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor (Church.ChurchFree f)
                   @ a2
                   @ b
                   eta :: Church.ChurchFree f a2
                   eta1 :: Church.ChurchFree f b ->
                 let {
                   m1 :: Church.ChurchFree f (b -> a2)
                   = GHC.Base.fmap
                       @ (Church.ChurchFree f)
                       $dFunctor
                       @ a2
                       @ (b -> a2)
                       (GHC.Base.const @ a2 @ b)
                       eta
                 } in
                 (\ @ w eta2 :: a2 -> w eta3 :: f w -> w ->
                  m1 `cast` (Church.NTCo:ChurchFree[0] <f>_R <b -> a2>_R)
                    @ w
                    (\ v :: b -> a2 ->
                     eta1 `cast` (Church.NTCo:ChurchFree[0] <f>_R <b>_R)
                       @ w
                       (\ v1 :: b -> eta2 (v v1))
                       eta3)
                    eta3)
                   `cast`
                 (Sym (Church.NTCo:ChurchFree[0] <f>_R <a2>_R))) -}
424c68687a987f8280ebaa82041df6c1
  $fApplicativeChurchFree_$c<*> ::
    GHC.Base.Functor (Church.ChurchFree f) =>
    forall a b.
    Church.ChurchFree f (a -> b)
    -> Church.ChurchFree f a -> Church.ChurchFree f b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><C(C(S)),1*C1(C1(U))><L,C(C1(U))><L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Church.$fApplicativeChurchFree1
                  `cast`
                (forall (f :: * -> *).
                 <GHC.Base.Functor (Church.ChurchFree f)>_R
                 ->_R forall a2 b.
                      <Church.ChurchFree f (a2 -> b)>_R
                      ->_R <Church.ChurchFree f a2>_R
                      ->_R Sym (Church.NTCo:ChurchFree[0] <f>_R <b>_R)) -}
424c68687a987f8280ebaa82041df6c1
  $fApplicativeChurchFree_$cpure ::
    GHC.Base.Functor (Church.ChurchFree f) =>
    forall a. a -> Church.ChurchFree f a
  {- Arity: 4, Strictness: <L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, True)
                (\ @ (f :: * -> *) w :: GHC.Base.Functor (Church.ChurchFree f) ->
                 Church.$w$cpure @ f GHC.Prim.void#) -}
424c68687a987f8280ebaa82041df6c1
  $fFunctorChurchFree :: GHC.Base.Functor (Church.ChurchFree f)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *).
                  @ (Church.ChurchFree f)
                  (Church.$fFunctorChurchFree_$cfmap @ f)
                  (Church.$fFunctorChurchFree_$c<$ @ f) -}
424c68687a987f8280ebaa82041df6c1
  $fFunctorChurchFree_$c<$ ::
    a -> Church.ChurchFree f b -> Church.ChurchFree f a
  {- Arity: 2, Strictness: <L,U><L,U> -}
424c68687a987f8280ebaa82041df6c1
  $fFunctorChurchFree_$cfmap ::
    (a -> b) -> Church.ChurchFree f a -> Church.ChurchFree f b
  {- Arity: 2, Inline: INLINE (sat-args=0),
     Unfolding(loop-breaker): InlineRule (0, False, False)
                              (\ @ (f :: * -> *) @ a2 @ b ->
                               GHC.Base.liftM
                                 @ a2
                                 @ b
                                 @ (Church.ChurchFree f)
                                 (Church.$fMonadChurchFree
                                    @ f
                                    (Church.$fApplicativeChurchFree
                                       @ f
                                       (Church.$fFunctorChurchFree @ f)))) -}
424c68687a987f8280ebaa82041df6c1
  $fMonadChurchFree ::
    GHC.Base.Applicative (Church.ChurchFree f) =>
    GHC.Base.Monad (Church.ChurchFree f)
  DFunId[1]
  {- Arity: 1, Strictness: <L,U>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      $dApplicative1 :: GHC.Base.Applicative (Church.ChurchFree f).
                  @ (Church.ChurchFree f)
                  $dApplicative1
                  (Church.$fMonadChurchFree_$c>>= @ f $dApplicative1)
                  (Church.$fMonadChurchFree_$c>> @ f $dApplicative1)
                  (Church.$fMonadChurchFree_$creturn @ f $dApplicative1)
                  (Church.$fMonadChurchFree_$cfail @ f $dApplicative1) -}
424c68687a987f8280ebaa82041df6c1
  $fMonadChurchFree_$c>> ::
    GHC.Base.Applicative (Church.ChurchFree f) =>
    forall a b.
    Church.ChurchFree f a
    -> Church.ChurchFree f b -> Church.ChurchFree f b
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   $dApplicative1 :: GHC.Base.Applicative (Church.ChurchFree f)
                   @ a2
                   @ b
                   m1 :: Church.ChurchFree f a2
                   k :: Church.ChurchFree f b ->
                 GHC.Base.$
                   @ (forall w. (b -> w) -> (f w -> w) -> w)
                   @ (Church.ChurchFree f b)
                   (\ tpl :: forall w. (b -> w) -> (f w -> w) -> w -> tpl)
                     `cast`
                   (<forall w. (b -> w) -> (f w -> w) -> w>_R
                    ->_R Sym (Church.NTCo:ChurchFree[0] <f>_R <b>_R))
                   (\ @ w ret :: b -> w emb :: f w -> w ->
                    Church.runChurchFree
                      @ f
                      @ a2
                      @ w
                      m1
                      (\ v :: a2 -> Church.runChurchFree @ f @ b @ w k ret emb)
                      emb)) -}
424c68687a987f8280ebaa82041df6c1
  $fMonadChurchFree_$c>>= ::
    GHC.Base.Applicative (Church.ChurchFree f) =>
    forall a b.
    Church.ChurchFree f a
    -> (a -> Church.ChurchFree f b) -> Church.ChurchFree f b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><C(C(S)),1*C1(C1(U))><L,C(C1(C1(U)))><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   $dApplicative1 :: GHC.Base.Applicative (Church.ChurchFree f)
                   @ a2
                   @ b
                   m :: Church.ChurchFree f a2
                   f1 :: a2 -> Church.ChurchFree f b ->
                 GHC.Base.$
                   @ (forall w. (b -> w) -> (f w -> w) -> w)
                   @ (Church.ChurchFree f b)
                   (\ tpl :: forall w. (b -> w) -> (f w -> w) -> w -> tpl)
                     `cast`
                   (<forall w. (b -> w) -> (f w -> w) -> w>_R
                    ->_R Sym (Church.NTCo:ChurchFree[0] <f>_R <b>_R))
                   (\ @ w ret :: b -> w emb :: f w -> w ->
                    Church.runChurchFree
                      @ f
                      @ a2
                      @ w
                      m
                      (\ v :: a2 -> Church.runChurchFree @ f @ b @ w (f1 v) ret emb)
                      emb)) -}
424c68687a987f8280ebaa82041df6c1
  $fMonadChurchFree_$cfail ::
    GHC.Base.Applicative (Church.ChurchFree f) =>
    forall a. GHC.Base.String -> Church.ChurchFree f a
  {- Arity: 2, Strictness: <B,A><B,U>b,
     Unfolding: InlineRule (2, True, True)
                (\ @ (f :: * -> *)
                   $dApplicative1 :: GHC.Base.Applicative (Church.ChurchFree f)
                   @ a2
                   eta :: [GHC.Types.Char] ->
                 GHC.Err.error @ (Church.ChurchFree f a2) eta) -}
424c68687a987f8280ebaa82041df6c1
  $fMonadChurchFree_$creturn ::
    GHC.Base.Applicative (Church.ChurchFree f) =>
    forall a. a -> Church.ChurchFree f a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,U><C(S),1*C1(U)><L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ (f :: * -> *)
                   $dApplicative1 :: GHC.Base.Applicative (Church.ChurchFree f)
                   @ a2
                   x :: a2 ->
                 GHC.Base.$
                   @ (forall w. (a2 -> w) -> (f w -> w) -> w)
                   @ (Church.ChurchFree f a2)
                   (\ tpl :: forall w. (a2 -> w) -> (f w -> w) -> w -> tpl)
                     `cast`
                   (<forall w. (a2 -> w) -> (f w -> w) -> w>_R
                    ->_R Sym (Church.NTCo:ChurchFree[0] <f>_R <a2>_R))
                   (\ @ w ret :: a2 -> w ds :: f w -> w -> ret x)) -}
424c68687a987f8280ebaa82041df6c1
  $fMonadFreefChurchFree ::
    (GHC.Base.Monad (Church.ChurchFree f), GHC.Base.Functor f) =>
    Base.MonadFree f (Church.ChurchFree f)
  DFunId[1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      $dMonad1 :: GHC.Base.Monad (Church.ChurchFree f)
                      $dFunctor :: GHC.Base.Functor f.
                  @ f
                  @ (Church.ChurchFree f)
                  $dMonad1
                  (Church.$fMonadFreefChurchFree_$cwrap @ f $dMonad1 $dFunctor) -}
424c68687a987f8280ebaa82041df6c1
  $fMonadFreefChurchFree1 ::
    (GHC.Base.Monad (Church.ChurchFree f), GHC.Base.Functor f) =>
    forall a.
    f (Church.ChurchFree f a) -> forall w. (a -> w) -> (f w -> w) -> w
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,1*U(1*C1(C1(U)),A)><L,U><L,U><C(S),U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ (f :: * -> *)
                   $dMonad1 :: GHC.Base.Monad (Church.ChurchFree f)
                   $dFunctor :: GHC.Base.Functor f
                   @ a2
                   a3 :: f (Church.ChurchFree f a2)
                   @ w
                   ret :: a2 -> w
                   w1 :: f w -> w ->
                 w1
                   (GHC.Base.fmap
                      @ f
                      $dFunctor
                      @ (Church.ChurchFree f a2)
                      @ w
                      (\ x :: Church.ChurchFree f a2 ->
                       x `cast` (Church.NTCo:ChurchFree[0] <f>_R <a2>_R) @ w ret w1)
                      a3)) -}
424c68687a987f8280ebaa82041df6c1
  $fMonadFreefChurchFree_$cwrap ::
    (GHC.Base.Monad (Church.ChurchFree f), GHC.Base.Functor f) =>
    forall a. f (Church.ChurchFree f a) -> Church.ChurchFree f a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,1*U(1*C1(C1(U)),A)><L,U><L,U><C(S),U>,
     Unfolding: InlineRule (0, True, True)
                Church.$fMonadFreefChurchFree1
                  `cast`
                (forall (f :: * -> *).
                 <GHC.Base.Monad (Church.ChurchFree f)>_R
                 ->_R <GHC.Base.Functor f>_R
                 ->_R forall a2.
                      <f (Church.ChurchFree f a2)>_R
                      ->_R Sym (Church.NTCo:ChurchFree[0] <f>_R <a2>_R)) -}
424c68687a987f8280ebaa82041df6c1
  $w$cpure :: GHC.Prim.Void# -> forall a. a -> Church.ChurchFree f a
  {- Arity: 4, Strictness: <L,U>, Inline: [0] -}
424c68687a987f8280ebaa82041df6c1
  newtype ChurchFree (f :: * -> *) a
    = ChurchFree {runChurchFree :: forall w.
                                   (a -> w) -> (f w -> w) -> w}
991091315e6a4c8960cc8433c4b21728
  run ::
    Church.ChurchFree Base.F a -> GHC.Types.Int -> (GHC.Types.Int, a)
  {- Arity: 1, HasNoCafRefs, Strictness: <C(C(S)),1*C1(C1(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a2 a3 :: Church.ChurchFree Base.F a2 ->
                 a3 `cast` (Church.NTCo:ChurchFree[0] <Base.F>_R <a2>_R)
                   @ (GHC.Types.Int -> (GHC.Types.Int, a2))
                   (Church.run2 @ a2)
                   (Church.run1 @ a2)) -}
86ba3c6ee75afcf9678880cd890f54e5
  run1 ::
    Base.F (GHC.Types.Int -> (GHC.Types.Int, a))
    -> GHC.Types.Int -> (GHC.Types.Int, a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(C(S(LC(S)))),1*U(1*C1(U(U,1*C1(U(U,U)))))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a2
                   t :: Base.F (GHC.Types.Int -> (GHC.Types.Int, a2))
                   s :: GHC.Types.Int ->
                 case t of wild { Base.F ds1 ->
                 case ds1 s of wild1 { (,) s' k -> k s' } }) -}
2f1adc1d80f471ed91c318bc6723849b
  run2 :: a -> GHC.Types.Int -> (GHC.Types.Int, a)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (2, True, True)
                (\ @ a2 r :: a2 s :: GHC.Types.Int -> (s, r)) -}
424c68687a987f8280ebaa82041df6c1
  runChurchFree ::
    Church.ChurchFree f a -> (a -> w) -> (f w -> w) -> w
  RecSel Church.ChurchFree
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (f :: * -> *) @ a2 @ w ds :: Church.ChurchFree f a2 ->
                 ds `cast` (Church.NTCo:ChurchFree[0] <f>_R <a2>_R) @ w) -}
instance GHC.Base.Applicative [Church.ChurchFree]
  = Church.$fApplicativeChurchFree
instance GHC.Base.Functor [Church.ChurchFree]
  = Church.$fFunctorChurchFree
instance GHC.Base.Monad [Church.ChurchFree]
  = Church.$fMonadChurchFree
instance Base.MonadFree [., Church.ChurchFree]
  = Church.$fMonadFreefChurchFree
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

