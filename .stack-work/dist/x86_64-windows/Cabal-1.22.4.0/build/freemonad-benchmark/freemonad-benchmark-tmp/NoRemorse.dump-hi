
==================== FINAL INTERFACE ====================
2016-01-04 15:50:42.1723885 UTC

interface main@main:NoRemorse 7102
  interface hash: 77b7adc2c40fb7cdbbd2f9a8646714df
  ABI hash: 64642d3b7ac516b9e6716609af2f5709
  export-list hash: 77007b5a8c3fd0dc88c4d9a781755318
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b585ef434072f0f425f43d0c8521080e
  sig of: Nothing
  used TH splices: False
  where
exports:
  NoRemorse.fromView
  NoRemorse.run
  NoRemorse.toView
  NoRemorse.FC{NoRemorse.FC}
  NoRemorse.FMExp
  NoRemorse.FreeMonad{NoRemorse.FM}
  NoRemorse.FreeMonadView{NoRemorse.Impure NoRemorse.Pure}
  NoRemorse.TCQueue
module dependencies: Base Data.CTQueue Data.FastTCQueue
                     Data.Interface.Sequence Data.Interface.TSequence Data.RTQueue
                     Data.TConsList Data.TSnocList
package dependencies: Win32-2.3.1.0@Win32_JH0ECVJdFmmG0JOvttvGqi
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ base-4.8.1.0
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      exceptions-0.8.0.2@excep_8GsEeHgaIks3pVGk6GaELJ ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
                      lifted-base-0.2.3.6@lifte_K3cQFA6mRg85rpDaA9numU
                      mmorph-1.0.4@mmorp_8dNpUU8QFPe77rrwKAb20b
                      monad-control-1.0.0.4@monad_3XCDr1mqlERGZgaxuwJF6b
                      mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      resourcet-1.1.6@resou_Ic1TzDDmqYbFNHpzRsDmfS
                      stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr
                      streaming-0.1.4.0@strea_FSz849cBl1PCe6X22prWwo
                      time-1.5.0.1@time_ECG3PhVYxEUEM046TXoOWk
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
                      transformers-base-0.4.4@trans_88TAFm21vtn2NrYUppy50c
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         main@main:Data.Interface.TSequence
         stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr:Control.Monad.STM
         streaming-0.1.4.0@strea_FSz849cBl1PCe6X22prWwo:Streaming.Prelude
         time-1.5.0.1@time_ECG3PhVYxEUEM046TXoOWk:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_ECG3PhVYxEUEM046TXoOWk:Data.Time.Format.Parse
         time-1.5.0.1@time_ECG3PhVYxEUEM046TXoOWk:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         monad-control-1.0.0.4@monad_3XCDr1mqlERGZgaxuwJF6b:Control.Monad.Trans.Control
                         resourcet-1.1.6@resou_Ic1TzDDmqYbFNHpzRsDmfS:Control.Monad.Trans.Resource.Internal
import  -/  base-4.8.1.0:Control.Monad dfea142d91349c4861427789d50d5b80
import  -/  base-4.8.1.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  Base 4539c1b83b5f5c3bc3a6d6f65d743fb2
  exports: 8763dd5bae4f40ca274cc839ac61fcf9
  F b260b91cf94c568dd588600cb83d719c
  F 7cbec1f8f3194174f75be33e5b893b9f
  MonadFree 214a069f1b90a7dfdbb158c26b94063c
  wrap 934c5269797907e84f278b415b88a6c3
import  -/  Data.FastTCQueue dbdd3c1735d7aa58dca2c95ac7dac6ab
  exports: 3512bb1ccb61cfc71365f07867eb3f18
  FastTCQueue 467a9b2ce0a7d6d7b9e6025e2e7b6696
import  -/  Data.Interface.TSequence e7c1c4592f1a02ccf97efe09e6a07e60
  exports: 30011f52b7228743e59eb112c86ccb83
  :| c61e394008b9bdc16ca29eb7a10bc17e
  >< 430474553331ffd2d67a4ca8920795bd
  TEmptyL 8e030811f3682aa0e59687e95986ede7
  tempty 4a6d1ef7a996ab8c9b0927d6fa434398
  tsingleton 4f6df92211cfc50efea0da8c4340430d
  tviewl 7d4188ec9181eb1c6a61292f35405bd5
c1cb4d6a85547e00b11345b3c5e9f1c2
  $fApplicativeFreeMonad ::
    GHC.Base.Functor (NoRemorse.FreeMonad f) =>
    GHC.Base.Applicative (NoRemorse.FreeMonad f)
  DFunId[1]
  {- Arity: 1, Strictness: <L,U(U,U)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      $dFunctor :: GHC.Base.Functor (NoRemorse.FreeMonad f).
                  @ (NoRemorse.FreeMonad f)
                  $dFunctor
                  (NoRemorse.$fApplicativeFreeMonad_$cpure @ f $dFunctor)
                  (NoRemorse.$fApplicativeFreeMonad_$c<*> @ f $dFunctor)
                  (NoRemorse.$fApplicativeFreeMonad_$c*> @ f $dFunctor)
                  (NoRemorse.$fApplicativeFreeMonad_$c<* @ f $dFunctor) -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  $fApplicativeFreeMonad1 ::
    Data.RTQueue.RTQueue
      (Data.CTQueue.CTQueue Data.RTQueue.RTQueue (NoRemorse.FC f)) b b
  {- HasNoCafRefs,
     Unfolding: (\ @ (f :: * -> *) @ b ->
                 Data.RTQueue.RQ
                   @ (Data.CTQueue.CTQueue Data.RTQueue.RTQueue (NoRemorse.FC f))
                   @ b
                   @ b
                   @ b
                   @ b
                   (Data.RTQueue.$fTSequenceRTQueue3
                      @ (Data.CTQueue.CTQueue Data.RTQueue.RTQueue (NoRemorse.FC f))
                      @ b)
                   (Data.RTQueue.$fTSequenceRTQueue2
                      @ (Data.CTQueue.CTQueue Data.RTQueue.RTQueue (NoRemorse.FC f))
                      @ b)
                   (Data.RTQueue.$fTSequenceRTQueue3
                      @ (Data.CTQueue.CTQueue Data.RTQueue.RTQueue (NoRemorse.FC f))
                      @ b)) -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  $fApplicativeFreeMonad2 :: a -> NoRemorse.FreeMonad f a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *) @ a x :: a ->
                 NoRemorse.FM
                   @ f
                   @ a
                   @ a
                   (NoRemorse.Pure @ f @ a x)
                   (Data.CTQueue.$WC0
                      @ Data.RTQueue.RTQueue
                      @ (NoRemorse.FC f)
                      @ a)) -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  $fApplicativeFreeMonad_$c*> ::
    GHC.Base.Functor (NoRemorse.FreeMonad f) =>
    forall a b.
    NoRemorse.FreeMonad f a
    -> NoRemorse.FreeMonad f b -> NoRemorse.FreeMonad f b
  {- Arity: 3, Strictness: <L,U(U,U)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor (NoRemorse.FreeMonad f)
                   @ a
                   @ b
                   eta :: NoRemorse.FreeMonad f a
                   eta1 :: NoRemorse.FreeMonad f b ->
                 NoRemorse.$fApplicativeFreeMonad_$c<*>
                   @ f
                   $dFunctor
                   @ b
                   @ b
                   (GHC.Base.<$
                      @ (NoRemorse.FreeMonad f)
                      $dFunctor
                      @ (b -> b)
                      @ a
                      (GHC.Base.id @ b)
                      eta)
                   eta1) -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  $fApplicativeFreeMonad_$c<* ::
    GHC.Base.Functor (NoRemorse.FreeMonad f) =>
    forall a b.
    NoRemorse.FreeMonad f a
    -> NoRemorse.FreeMonad f b -> NoRemorse.FreeMonad f a
  {- Arity: 3, Strictness: <L,U(U,U)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor (NoRemorse.FreeMonad f)
                   @ a
                   @ b
                   eta :: NoRemorse.FreeMonad f a
                   eta1 :: NoRemorse.FreeMonad f b ->
                 NoRemorse.$fApplicativeFreeMonad_$c<*>
                   @ f
                   $dFunctor
                   @ b
                   @ a
                   (GHC.Base.fmap
                      @ (NoRemorse.FreeMonad f)
                      $dFunctor
                      @ a
                      @ (b -> a)
                      (GHC.Base.const @ a @ b)
                      eta)
                   eta1) -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  $fApplicativeFreeMonad_$c<*> ::
    GHC.Base.Functor (NoRemorse.FreeMonad f) =>
    forall a b.
    NoRemorse.FreeMonad f (a -> b)
    -> NoRemorse.FreeMonad f a -> NoRemorse.FreeMonad f b
  {- Arity: 3, Strictness: <L,U(U,U)>,
     Unfolding: (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor (NoRemorse.FreeMonad f)
                   @ a
                   @ b
                   eta :: NoRemorse.FreeMonad f (a -> b)
                   eta1 :: NoRemorse.FreeMonad f a ->
                 NoRemorse.$w$c>>=
                   @ f
                   @ (a -> b)
                   @ b
                   eta
                   (\ x1 :: a -> b ->
                    NoRemorse.$w$c>>=
                      @ f
                      @ a
                      @ b
                      eta1
                      (\ x2 :: a ->
                       NoRemorse.FM
                         @ f
                         @ b
                         @ b
                         (NoRemorse.Pure @ f @ b (x1 x2))
                         (Data.CTQueue.$WC0
                            @ Data.RTQueue.RTQueue
                            @ (NoRemorse.FC f)
                            @ b)))) -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  $fApplicativeFreeMonad_$cpure ::
    GHC.Base.Functor (NoRemorse.FreeMonad f) =>
    forall a. a -> NoRemorse.FreeMonad f a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor (NoRemorse.FreeMonad f)
                   @ a
                   eta :: a ->
                 NoRemorse.$fApplicativeFreeMonad2 @ f @ a eta) -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  $fFunctorFreeMonad :: GHC.Base.Functor (NoRemorse.FreeMonad f)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *).
                  @ (NoRemorse.FreeMonad f)
                  (NoRemorse.$fFunctorFreeMonad_$cfmap @ f)
                  (NoRemorse.$fFunctorFreeMonad_$c<$ @ f) -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  $fFunctorFreeMonad_$c<$ ::
    a -> NoRemorse.FreeMonad f b -> NoRemorse.FreeMonad f a
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   @ a
                   @ b
                   eta :: a
                   eta1 :: NoRemorse.FreeMonad f b ->
                 NoRemorse.$fFunctorFreeMonad_$cfmap
                   @ f
                   @ b
                   @ a
                   (\ ds :: b -> eta)
                   eta1) -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  $fFunctorFreeMonad_$cfmap ::
    (a -> b) -> NoRemorse.FreeMonad f a -> NoRemorse.FreeMonad f b
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ (f :: * -> *)
                   @ a
                   @ b
                   f1 :: a -> b
                   m1 :: NoRemorse.FreeMonad f a ->
                 NoRemorse.$w$c>>=
                   @ f
                   @ a
                   @ b
                   m1
                   (\ x1 :: a ->
                    NoRemorse.FM
                      @ f
                      @ b
                      @ b
                      (NoRemorse.Pure @ f @ b (f1 x1))
                      (Data.CTQueue.$WC0
                         @ Data.RTQueue.RTQueue
                         @ (NoRemorse.FC f)
                         @ b))) -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  $fMonadFreeMonad ::
    GHC.Base.Applicative (NoRemorse.FreeMonad f) =>
    GHC.Base.Monad (NoRemorse.FreeMonad f)
  DFunId[1]
  {- Arity: 1, Strictness: <L,U>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      $dApplicative :: GHC.Base.Applicative (NoRemorse.FreeMonad f).
                  @ (NoRemorse.FreeMonad f)
                  $dApplicative
                  (NoRemorse.$fMonadFreeMonad_$c>>= @ f $dApplicative)
                  (NoRemorse.$fMonadFreeMonad_$c>> @ f $dApplicative)
                  (NoRemorse.$fMonadFreeMonad_$creturn @ f $dApplicative)
                  (NoRemorse.$fMonadFreeMonad_$cfail @ f $dApplicative) -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  $fMonadFreeMonad_$c>> ::
    GHC.Base.Applicative (NoRemorse.FreeMonad f) =>
    forall a b.
    NoRemorse.FreeMonad f a
    -> NoRemorse.FreeMonad f b -> NoRemorse.FreeMonad f b
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   $dApplicative :: GHC.Base.Applicative (NoRemorse.FreeMonad f)
                   @ a
                   @ b
                   m1 :: NoRemorse.FreeMonad f a
                   k :: NoRemorse.FreeMonad f b ->
                 NoRemorse.$fMonadFreeMonad_$c>>=
                   @ f
                   $dApplicative
                   @ a
                   @ b
                   m1
                   (\ ds :: a -> k)) -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  $fMonadFreeMonad_$c>>= ::
    GHC.Base.Applicative (NoRemorse.FreeMonad f) =>
    forall a b.
    NoRemorse.FreeMonad f a
    -> (a -> NoRemorse.FreeMonad f b) -> NoRemorse.FreeMonad f b
  {- Arity: 3, Strictness: <L,A><S,1*U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ (f :: * -> *)
                   w :: GHC.Base.Applicative (NoRemorse.FreeMonad f)
                   @ a
                   @ b
                   w1 :: NoRemorse.FreeMonad f a
                   w2 :: a -> NoRemorse.FreeMonad f b ->
                 NoRemorse.$w$c>>= @ f @ a @ b w1 w2) -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  $fMonadFreeMonad_$cfail ::
    GHC.Base.Applicative (NoRemorse.FreeMonad f) =>
    forall a. GHC.Base.String -> NoRemorse.FreeMonad f a
  {- Arity: 2, Strictness: <B,A><B,U>b,
     Unfolding: InlineRule (2, True, True)
                (\ @ (f :: * -> *)
                   $dApplicative :: GHC.Base.Applicative (NoRemorse.FreeMonad f)
                   @ a
                   eta :: [GHC.Types.Char] ->
                 GHC.Err.error @ (NoRemorse.FreeMonad f a) eta) -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  $fMonadFreeMonad_$creturn ::
    GHC.Base.Applicative (NoRemorse.FreeMonad f) =>
    forall a. a -> NoRemorse.FreeMonad f a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (f :: * -> *)
                   $dApplicative :: GHC.Base.Applicative (NoRemorse.FreeMonad f)
                   @ a
                   eta :: a ->
                 NoRemorse.$fApplicativeFreeMonad2 @ f @ a eta) -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  $fMonadFreefFreeMonad ::
    GHC.Base.Monad (NoRemorse.FreeMonad f) =>
    Base.MonadFree f (NoRemorse.FreeMonad f)
  DFunId[1]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (f :: * -> *)
                      $dMonad :: GHC.Base.Monad (NoRemorse.FreeMonad f).
                  @ f
                  @ (NoRemorse.FreeMonad f)
                  $dMonad
                  (NoRemorse.$fMonadFreefFreeMonad_$cwrap @ f $dMonad) -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  $fMonadFreefFreeMonad_$cwrap ::
    GHC.Base.Monad (NoRemorse.FreeMonad f) =>
    forall a. f (NoRemorse.FreeMonad f a) -> NoRemorse.FreeMonad f a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (f :: * -> *)
                   $dMonad :: GHC.Base.Monad (NoRemorse.FreeMonad f)
                   @ a
                   a1 :: f (NoRemorse.FreeMonad f a) ->
                 NoRemorse.FM
                   @ f
                   @ a
                   @ a
                   (NoRemorse.Impure @ f @ a a1)
                   (Data.CTQueue.$WC0
                      @ Data.RTQueue.RTQueue
                      @ (NoRemorse.FC f)
                      @ a)) -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  $w$c>>= ::
    NoRemorse.FreeMonad f a
    -> (a -> NoRemorse.FreeMonad f b) -> NoRemorse.FreeMonad f b
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ @ (f :: * -> *)
                   @ a
                   @ b
                   w :: NoRemorse.FreeMonad f a
                   w1 :: a -> NoRemorse.FreeMonad f b ->
                 case w of wild { NoRemorse.FM x m r ->
                 NoRemorse.FM
                   @ f
                   @ b
                   @ x
                   m
                   (case r of wild1 {
                      Data.CTQueue.C0 dt
                      -> (Data.CTQueue.CN
                            @ Data.RTQueue.RTQueue
                            @ (NoRemorse.FC f)
                            @ a
                            @ b
                            @ b
                            w1 `cast` (Sym (NoRemorse.NTCo:FC[0] <f>_N <a>_R <b>_N))
                            (NoRemorse.$fApplicativeFreeMonad1 @ f @ b))
                           `cast`
                         (Data.CTQueue.CTQueue
                            <Data.RTQueue.RTQueue>_N <NoRemorse.FC f>_N (Sym dt) <b>_N)_R
                      Data.CTQueue.CN ipv00 ipv ipv1
                      -> case ipv1 of wild2 { Data.RTQueue.RQ b0 x20 f1 r1 a1 ->
                         case a1 of wild3 {
                           Data.TConsList.CNil dt
                           -> case Data.RTQueue.rotate
                                     @ (Data.CTQueue.CTQueue Data.RTQueue.RTQueue (NoRemorse.FC f))
                                     @ ipv00
                                     @ b0
                                     @ b
                                     @ b
                                     f1
                                     (Data.TSnocList.Snoc
                                        @ (Data.CTQueue.CTQueue
                                             Data.RTQueue.RTQueue (NoRemorse.FC f))
                                        @ b0
                                        @ b
                                        @ a
                                        r1
                                        (Data.CTQueue.CN
                                           @ Data.RTQueue.RTQueue
                                           @ (NoRemorse.FC f)
                                           @ a
                                           @ b
                                           @ b
                                           w1 `cast` (Sym (NoRemorse.NTCo:FC[0] <f>_N <a>_R <b>_N))
                                           (NoRemorse.$fApplicativeFreeMonad1 @ f @ b)))
                                     (Data.TConsList.$WCNil
                                        @ (Data.CTQueue.CTQueue
                                             Data.RTQueue.RTQueue (NoRemorse.FC f))
                                        @ b) of dt1 { DEFAULT ->
                              Data.CTQueue.CN
                                @ Data.RTQueue.RTQueue
                                @ (NoRemorse.FC f)
                                @ x
                                @ b
                                @ ipv00
                                ipv
                                (Data.RTQueue.RQ
                                   @ (Data.CTQueue.CTQueue Data.RTQueue.RTQueue (NoRemorse.FC f))
                                   @ ipv00
                                   @ b
                                   @ b
                                   @ ipv00
                                   dt1
                                   (Data.TSnocList.SNil
                                      @ (Data.CTQueue.CTQueue Data.RTQueue.RTQueue (NoRemorse.FC f))
                                      @ b
                                      @ b
                                      @~ <b>_N)
                                   dt1) }
                           Data.TConsList.Cons y10 h t
                           -> case t of dt { DEFAULT ->
                              Data.CTQueue.CN
                                @ Data.RTQueue.RTQueue
                                @ (NoRemorse.FC f)
                                @ x
                                @ b
                                @ ipv00
                                ipv
                                (Data.RTQueue.RQ
                                   @ (Data.CTQueue.CTQueue Data.RTQueue.RTQueue (NoRemorse.FC f))
                                   @ ipv00
                                   @ b
                                   @ b0
                                   @ y10
                                   f1
                                   (Data.TSnocList.Snoc
                                      @ (Data.CTQueue.CTQueue Data.RTQueue.RTQueue (NoRemorse.FC f))
                                      @ b0
                                      @ b
                                      @ a
                                      r1
                                      (Data.CTQueue.CN
                                         @ Data.RTQueue.RTQueue
                                         @ (NoRemorse.FC f)
                                         @ a
                                         @ b
                                         @ b
                                         w1 `cast` (Sym (NoRemorse.NTCo:FC[0] <f>_N <a>_R <b>_N))
                                         (NoRemorse.$fApplicativeFreeMonad1 @ f @ b)))
                                   dt) } } } }) }) -}
3f49a846e3fe7ad5abb25b03cb584031
  $wrun ::
    NoRemorse.FreeMonad Base.F a
    -> GHC.Types.Int -> (# GHC.Types.Int, a #)
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
c1cb4d6a85547e00b11345b3c5e9f1c2
  type role FC nominal representational nominal
  newtype FC (f :: * -> *) a b = FC (a -> NoRemorse.FreeMonad f b)
c1cb4d6a85547e00b11345b3c5e9f1c2
  type FMExp (f :: * -> *) a b =
    NoRemorse.TCQueue (NoRemorse.FC f) a b
c1cb4d6a85547e00b11345b3c5e9f1c2
  type role FreeMonad nominal nominal
  data FreeMonad (f :: * -> *) a where
    FM :: (NoRemorse.FreeMonadView f x) -> (NoRemorse.FMExp f x a)
          -> FreeMonad f a
    RecFlag: Recursive
c1cb4d6a85547e00b11345b3c5e9f1c2
  type role FreeMonadView nominal nominal
  data FreeMonadView (f :: * -> *) a
    = Pure a | Impure (f (NoRemorse.FreeMonad f a))
76519c360bfec304883ccdd216d1c8a8
  type TCQueue = Data.FastTCQueue.FastTCQueue
e6897e82e23926c3cbc9f7eb966ba960
  fromView :: NoRemorse.FreeMonadView f a -> NoRemorse.FreeMonad f a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (f :: * -> *) @ a x :: NoRemorse.FreeMonadView f a ->
                 NoRemorse.FM
                   @ f
                   @ a
                   @ a
                   x
                   (Data.CTQueue.$WC0
                      @ Data.RTQueue.RTQueue
                      @ (NoRemorse.FC f)
                      @ a)) -}
17d368fa6fd538faaf5911443c816793
  run ::
    NoRemorse.FreeMonad Base.F a -> GHC.Types.Int -> (GHC.Types.Int, a)
  {- Arity: 2, Strictness: <S,1*U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a w :: NoRemorse.FreeMonad Base.F a w1 :: GHC.Types.Int ->
                 case NoRemorse.$wrun @ a w w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
116402e01b92c66cc6e4d83c31530853
  toView ::
    GHC.Base.Functor f =>
    NoRemorse.FreeMonad f a -> NoRemorse.FreeMonadView f a
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U>,
     Unfolding: (\ @ (f :: * -> *)
                   @ a
                   $dFunctor :: GHC.Base.Functor f
                   ds :: NoRemorse.FreeMonad f a ->
                 case ds of wild { NoRemorse.FM x h t ->
                 case h of wild1 {
                   NoRemorse.Pure x1
                   -> case t of wild2 {
                        Data.CTQueue.C0 dt -> NoRemorse.Pure @ f @ a x1 `cast` (Sub dt)
                        Data.CTQueue.CN y10 h1 t1
                        -> case h1 `cast` (NoRemorse.NTCo:FC[0] <f>_N <x>_R <y10>_N)
                                  x1 of wild3 { NoRemorse.FM x2 h2 t2 ->
                           NoRemorse.toView_$stoView1
                             @ f
                             @ a
                             @ x2
                             $dFunctor
                             h2
                             (case t2 of wild4 {
                                Data.CTQueue.C0 dt
                                -> (Data.CTQueue.$fTSequenceCTQueue_linkAll
                                      @ Data.RTQueue.RTQueue
                                      @ (NoRemorse.FC f)
                                      @ y10
                                      @ a
                                      Data.RTQueue.$fTSequenceRTQueue
                                      t1)
                                     `cast`
                                   (Data.CTQueue.CTQueue
                                      <Data.RTQueue.RTQueue>_N <NoRemorse.FC f>_N (Sym dt) <a>_N)_R
                                Data.CTQueue.CN ipv00 ipv ipv1
                                -> case ipv1 of wild5 { Data.RTQueue.RQ b0 x20 f1 r a1 ->
                                   case Data.CTQueue.$fTSequenceCTQueue_linkAll
                                          @ Data.RTQueue.RTQueue
                                          @ (NoRemorse.FC f)
                                          @ y10
                                          @ a
                                          Data.RTQueue.$fTSequenceRTQueue
                                          t1 of wild6 {
                                     Data.CTQueue.C0 dt
                                     -> wild4
                                          `cast`
                                        (Data.CTQueue.CTQueue
                                           <Data.RTQueue.RTQueue>_N <NoRemorse.FC f>_N <x2>_N dt)_R
                                     Data.CTQueue.CN ipv20 ipv3 ipv4
                                     -> case a1 of wild7 {
                                          Data.TConsList.CNil dt
                                          -> case Data.RTQueue.rotate
                                                    @ (Data.CTQueue.CTQueue
                                                         Data.RTQueue.RTQueue (NoRemorse.FC f))
                                                    @ ipv00
                                                    @ b0
                                                    @ a
                                                    @ a
                                                    f1
                                                    (Data.TSnocList.Snoc
                                                       @ (Data.CTQueue.CTQueue
                                                            Data.RTQueue.RTQueue (NoRemorse.FC f))
                                                       @ b0
                                                       @ a
                                                       @ y10
                                                       r
                                                       wild6)
                                                    (Data.TConsList.$WCNil
                                                       @ (Data.CTQueue.CTQueue
                                                            Data.RTQueue.RTQueue (NoRemorse.FC f))
                                                       @ a) of dt1 { DEFAULT ->
                                             Data.CTQueue.CN
                                               @ Data.RTQueue.RTQueue
                                               @ (NoRemorse.FC f)
                                               @ x2
                                               @ a
                                               @ ipv00
                                               ipv
                                               (Data.RTQueue.RQ
                                                  @ (Data.CTQueue.CTQueue
                                                       Data.RTQueue.RTQueue (NoRemorse.FC f))
                                                  @ ipv00
                                                  @ a
                                                  @ a
                                                  @ ipv00
                                                  dt1
                                                  (Data.TSnocList.SNil
                                                     @ (Data.CTQueue.CTQueue
                                                          Data.RTQueue.RTQueue (NoRemorse.FC f))
                                                     @ a
                                                     @ a
                                                     @~ <a>_N)
                                                  dt1) }
                                          Data.TConsList.Cons y1 h3 t3
                                          -> case t3 of dt { DEFAULT ->
                                             Data.CTQueue.CN
                                               @ Data.RTQueue.RTQueue
                                               @ (NoRemorse.FC f)
                                               @ x2
                                               @ a
                                               @ ipv00
                                               ipv
                                               (Data.RTQueue.RQ
                                                  @ (Data.CTQueue.CTQueue
                                                       Data.RTQueue.RTQueue (NoRemorse.FC f))
                                                  @ ipv00
                                                  @ a
                                                  @ b0
                                                  @ y1
                                                  f1
                                                  (Data.TSnocList.Snoc
                                                     @ (Data.CTQueue.CTQueue
                                                          Data.RTQueue.RTQueue (NoRemorse.FC f))
                                                     @ b0
                                                     @ a
                                                     @ y10
                                                     r
                                                     wild6)
                                                  dt) } } } } }) } }
                   NoRemorse.Impure f1
                   -> NoRemorse.Impure
                        @ f
                        @ a
                        (GHC.Base.fmap
                           @ f
                           $dFunctor
                           @ (NoRemorse.FreeMonad f x)
                           @ (NoRemorse.FreeMonad f a)
                           (\ ds1 :: NoRemorse.FreeMonad f x ->
                            case ds1 of wild2 { NoRemorse.FM x1 h1 t1 ->
                            NoRemorse.FM
                              @ f
                              @ a
                              @ x1
                              h1
                              (case t1 of wild3 {
                                 Data.CTQueue.C0 dt
                                 -> t `cast`
                                    (Data.CTQueue.CTQueue
                                       <Data.RTQueue.RTQueue>_N <NoRemorse.FC f>_N (Sym dt) <a>_N)_R
                                 Data.CTQueue.CN ipv00 ipv ipv1
                                 -> case ipv1 of wild4 { Data.RTQueue.RQ b0 x20 f2 r a1 ->
                                    case t of wild5 {
                                      Data.CTQueue.C0 dt
                                      -> wild3
                                           `cast`
                                         (Data.CTQueue.CTQueue
                                            <Data.RTQueue.RTQueue>_N <NoRemorse.FC f>_N <x1>_N dt)_R
                                      Data.CTQueue.CN ipv20 ipv3 ipv4
                                      -> case a1 of wild6 {
                                           Data.TConsList.CNil dt
                                           -> case Data.RTQueue.rotate
                                                     @ (Data.CTQueue.CTQueue
                                                          Data.RTQueue.RTQueue (NoRemorse.FC f))
                                                     @ ipv00
                                                     @ b0
                                                     @ a
                                                     @ a
                                                     f2
                                                     (Data.TSnocList.Snoc
                                                        @ (Data.CTQueue.CTQueue
                                                             Data.RTQueue.RTQueue (NoRemorse.FC f))
                                                        @ b0
                                                        @ a
                                                        @ x
                                                        r
                                                        wild5)
                                                     (Data.TConsList.$WCNil
                                                        @ (Data.CTQueue.CTQueue
                                                             Data.RTQueue.RTQueue (NoRemorse.FC f))
                                                        @ a) of dt1 { DEFAULT ->
                                              Data.CTQueue.CN
                                                @ Data.RTQueue.RTQueue
                                                @ (NoRemorse.FC f)
                                                @ x1
                                                @ a
                                                @ ipv00
                                                ipv
                                                (Data.RTQueue.RQ
                                                   @ (Data.CTQueue.CTQueue
                                                        Data.RTQueue.RTQueue (NoRemorse.FC f))
                                                   @ ipv00
                                                   @ a
                                                   @ a
                                                   @ ipv00
                                                   dt1
                                                   (Data.TSnocList.SNil
                                                      @ (Data.CTQueue.CTQueue
                                                           Data.RTQueue.RTQueue (NoRemorse.FC f))
                                                      @ a
                                                      @ a
                                                      @~ <a>_N)
                                                   dt1) }
                                           Data.TConsList.Cons y10 h2 t2
                                           -> case t2 of dt { DEFAULT ->
                                              Data.CTQueue.CN
                                                @ Data.RTQueue.RTQueue
                                                @ (NoRemorse.FC f)
                                                @ x1
                                                @ a
                                                @ ipv00
                                                ipv
                                                (Data.RTQueue.RQ
                                                   @ (Data.CTQueue.CTQueue
                                                        Data.RTQueue.RTQueue (NoRemorse.FC f))
                                                   @ ipv00
                                                   @ a
                                                   @ b0
                                                   @ y10
                                                   f2
                                                   (Data.TSnocList.Snoc
                                                      @ (Data.CTQueue.CTQueue
                                                           Data.RTQueue.RTQueue (NoRemorse.FC f))
                                                      @ b0
                                                      @ a
                                                      @ x
                                                      r
                                                      wild5)
                                                   dt) } } } } }) })
                           f1) } }) -}
13b71d7237b976d61cc60f107f6d35c8
  toView_$s$stoView ::
    NoRemorse.FreeMonadView Base.F x
    -> Data.CTQueue.CTQueue
         Data.RTQueue.RTQueue (NoRemorse.FC Base.F) x a
    -> NoRemorse.FreeMonadView Base.F a
  {- Arity: 2, Strictness: <L,U><L,U> -}
b67a2c4e0deb974b3841892ef6234cab
  toView_$stoView ::
    NoRemorse.FreeMonad Base.F a -> NoRemorse.FreeMonadView Base.F a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a ds :: NoRemorse.FreeMonad Base.F a ->
                 case ds of wild { NoRemorse.FM x h t ->
                 case h of wild1 {
                   NoRemorse.Pure x1
                   -> case t of wild2 {
                        Data.CTQueue.C0 dt
                        -> NoRemorse.Pure @ Base.F @ a x1 `cast` (Sub dt)
                        Data.CTQueue.CN y10 h1 t1
                        -> case h1 `cast` (NoRemorse.NTCo:FC[0] <Base.F>_N <x>_R <y10>_N)
                                  x1 of wild3 { NoRemorse.FM x2 h2 t2 ->
                           NoRemorse.toView_$s$stoView
                             @ a
                             @ x2
                             h2
                             (case t2 of wild4 {
                                Data.CTQueue.C0 dt
                                -> (Data.CTQueue.$fTSequenceCTQueue_linkAll
                                      @ Data.RTQueue.RTQueue
                                      @ (NoRemorse.FC Base.F)
                                      @ y10
                                      @ a
                                      Data.RTQueue.$fTSequenceRTQueue
                                      t1)
                                     `cast`
                                   (Data.CTQueue.CTQueue
                                      <Data.RTQueue.RTQueue>_N
                                      <NoRemorse.FC Base.F>_N
                                      (Sym dt)
                                      <a>_N)_R
                                Data.CTQueue.CN ipv00 ipv ipv1
                                -> case ipv1 of wild5 { Data.RTQueue.RQ b0 x20 f r a1 ->
                                   case Data.CTQueue.$fTSequenceCTQueue_linkAll
                                          @ Data.RTQueue.RTQueue
                                          @ (NoRemorse.FC Base.F)
                                          @ y10
                                          @ a
                                          Data.RTQueue.$fTSequenceRTQueue
                                          t1 of wild6 {
                                     Data.CTQueue.C0 dt
                                     -> wild4
                                          `cast`
                                        (Data.CTQueue.CTQueue
                                           <Data.RTQueue.RTQueue>_N
                                           <NoRemorse.FC Base.F>_N
                                           <x2>_N
                                           dt)_R
                                     Data.CTQueue.CN ipv20 ipv3 ipv4
                                     -> case a1 of wild7 {
                                          Data.TConsList.CNil dt
                                          -> case Data.RTQueue.rotate
                                                    @ (Data.CTQueue.CTQueue
                                                         Data.RTQueue.RTQueue (NoRemorse.FC Base.F))
                                                    @ ipv00
                                                    @ b0
                                                    @ a
                                                    @ a
                                                    f
                                                    (Data.TSnocList.Snoc
                                                       @ (Data.CTQueue.CTQueue
                                                            Data.RTQueue.RTQueue
                                                            (NoRemorse.FC Base.F))
                                                       @ b0
                                                       @ a
                                                       @ y10
                                                       r
                                                       wild6)
                                                    (Data.TConsList.$WCNil
                                                       @ (Data.CTQueue.CTQueue
                                                            Data.RTQueue.RTQueue
                                                            (NoRemorse.FC Base.F))
                                                       @ a) of dt1 { DEFAULT ->
                                             Data.CTQueue.CN
                                               @ Data.RTQueue.RTQueue
                                               @ (NoRemorse.FC Base.F)
                                               @ x2
                                               @ a
                                               @ ipv00
                                               ipv
                                               (Data.RTQueue.RQ
                                                  @ (Data.CTQueue.CTQueue
                                                       Data.RTQueue.RTQueue (NoRemorse.FC Base.F))
                                                  @ ipv00
                                                  @ a
                                                  @ a
                                                  @ ipv00
                                                  dt1
                                                  (Data.TSnocList.SNil
                                                     @ (Data.CTQueue.CTQueue
                                                          Data.RTQueue.RTQueue
                                                          (NoRemorse.FC Base.F))
                                                     @ a
                                                     @ a
                                                     @~ <a>_N)
                                                  dt1) }
                                          Data.TConsList.Cons y1 h3 t3
                                          -> case t3 of dt { DEFAULT ->
                                             Data.CTQueue.CN
                                               @ Data.RTQueue.RTQueue
                                               @ (NoRemorse.FC Base.F)
                                               @ x2
                                               @ a
                                               @ ipv00
                                               ipv
                                               (Data.RTQueue.RQ
                                                  @ (Data.CTQueue.CTQueue
                                                       Data.RTQueue.RTQueue (NoRemorse.FC Base.F))
                                                  @ ipv00
                                                  @ a
                                                  @ b0
                                                  @ y1
                                                  f
                                                  (Data.TSnocList.Snoc
                                                     @ (Data.CTQueue.CTQueue
                                                          Data.RTQueue.RTQueue
                                                          (NoRemorse.FC Base.F))
                                                     @ b0
                                                     @ a
                                                     @ y10
                                                     r
                                                     wild6)
                                                  dt) } } } } }) } }
                   NoRemorse.Impure f
                   -> NoRemorse.Impure
                        @ Base.F
                        @ a
                        (case f of wild2 { Base.F a4 ->
                         Base.F
                           @ (NoRemorse.FreeMonad Base.F a)
                           (\ b5 :: GHC.Types.Int ->
                            case a4 b5 of wild3 { (,) a5 a6 ->
                            (a5,
                             case a6 of wild4 { NoRemorse.FM x1 h1 t1 ->
                             NoRemorse.FM
                               @ Base.F
                               @ a
                               @ x1
                               h1
                               (case t1 of wild5 {
                                  Data.CTQueue.C0 dt
                                  -> t `cast`
                                     (Data.CTQueue.CTQueue
                                        <Data.RTQueue.RTQueue>_N
                                        <NoRemorse.FC Base.F>_N
                                        (Sym dt)
                                        <a>_N)_R
                                  Data.CTQueue.CN ipv00 ipv ipv1
                                  -> case ipv1 of wild6 { Data.RTQueue.RQ b0 x20 f1 r a1 ->
                                     case t of wild7 {
                                       Data.CTQueue.C0 dt
                                       -> wild5
                                            `cast`
                                          (Data.CTQueue.CTQueue
                                             <Data.RTQueue.RTQueue>_N
                                             <NoRemorse.FC Base.F>_N
                                             <x1>_N
                                             dt)_R
                                       Data.CTQueue.CN ipv20 ipv3 ipv4
                                       -> case a1 of wild8 {
                                            Data.TConsList.CNil dt
                                            -> case Data.RTQueue.rotate
                                                      @ (Data.CTQueue.CTQueue
                                                           Data.RTQueue.RTQueue
                                                           (NoRemorse.FC Base.F))
                                                      @ ipv00
                                                      @ b0
                                                      @ a
                                                      @ a
                                                      f1
                                                      (Data.TSnocList.Snoc
                                                         @ (Data.CTQueue.CTQueue
                                                              Data.RTQueue.RTQueue
                                                              (NoRemorse.FC Base.F))
                                                         @ b0
                                                         @ a
                                                         @ x
                                                         r
                                                         wild7)
                                                      (Data.TConsList.$WCNil
                                                         @ (Data.CTQueue.CTQueue
                                                              Data.RTQueue.RTQueue
                                                              (NoRemorse.FC Base.F))
                                                         @ a) of dt1 { DEFAULT ->
                                               Data.CTQueue.CN
                                                 @ Data.RTQueue.RTQueue
                                                 @ (NoRemorse.FC Base.F)
                                                 @ x1
                                                 @ a
                                                 @ ipv00
                                                 ipv
                                                 (Data.RTQueue.RQ
                                                    @ (Data.CTQueue.CTQueue
                                                         Data.RTQueue.RTQueue (NoRemorse.FC Base.F))
                                                    @ ipv00
                                                    @ a
                                                    @ a
                                                    @ ipv00
                                                    dt1
                                                    (Data.TSnocList.SNil
                                                       @ (Data.CTQueue.CTQueue
                                                            Data.RTQueue.RTQueue
                                                            (NoRemorse.FC Base.F))
                                                       @ a
                                                       @ a
                                                       @~ <a>_N)
                                                    dt1) }
                                            Data.TConsList.Cons y10 h2 t2
                                            -> case t2 of dt { DEFAULT ->
                                               Data.CTQueue.CN
                                                 @ Data.RTQueue.RTQueue
                                                 @ (NoRemorse.FC Base.F)
                                                 @ x1
                                                 @ a
                                                 @ ipv00
                                                 ipv
                                                 (Data.RTQueue.RQ
                                                    @ (Data.CTQueue.CTQueue
                                                         Data.RTQueue.RTQueue (NoRemorse.FC Base.F))
                                                    @ ipv00
                                                    @ a
                                                    @ b0
                                                    @ y10
                                                    f1
                                                    (Data.TSnocList.Snoc
                                                       @ (Data.CTQueue.CTQueue
                                                            Data.RTQueue.RTQueue
                                                            (NoRemorse.FC Base.F))
                                                       @ b0
                                                       @ a
                                                       @ x
                                                       r
                                                       wild7)
                                                    dt) } } } } }) }) }) }) } }) -}
b7d3bca76c1bede99b2b056553616b22
  toView_$stoView1 ::
    GHC.Base.Functor f =>
    NoRemorse.FreeMonadView f x
    -> Data.CTQueue.CTQueue Data.RTQueue.RTQueue (NoRemorse.FC f) x a
    -> NoRemorse.FreeMonadView f a
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A)><L,U><L,U> -}
instance GHC.Base.Applicative [NoRemorse.FreeMonad]
  = NoRemorse.$fApplicativeFreeMonad
instance GHC.Base.Functor [NoRemorse.FreeMonad]
  = NoRemorse.$fFunctorFreeMonad
instance GHC.Base.Monad [NoRemorse.FreeMonad]
  = NoRemorse.$fMonadFreeMonad
instance Base.MonadFree [., NoRemorse.FreeMonad]
  = NoRemorse.$fMonadFreefFreeMonad
"SC:$stoView0" [ALWAYS] forall @ a
                               @ x
                               sc :: NoRemorse.FreeMonadView Base.F x
                               sc1 :: Data.CTQueue.CTQueue
                                        Data.RTQueue.RTQueue (NoRemorse.FC Base.F) x a
  NoRemorse.toView_$stoView @ a
                            (NoRemorse.FM @ Base.F @ a @ x sc sc1)
  = NoRemorse.toView_$s$stoView @ a @ x sc sc1
"SC:toView0" [ALWAYS] forall @ (f :: * -> *)
                             @ a
                             @ x
                             sc :: GHC.Base.Functor f
                             sc1 :: NoRemorse.FreeMonadView f x
                             sc2 :: Data.CTQueue.CTQueue
                                      Data.RTQueue.RTQueue (NoRemorse.FC f) x a
  NoRemorse.toView @ f @ a sc (NoRemorse.FM @ f @ a @ x sc1 sc2)
  = NoRemorse.toView_$stoView1 @ f @ a @ x sc sc1 sc2
"SPEC toView @ F _" [ALWAYS] forall @ a
                                    $dFunctor :: GHC.Base.Functor Base.F
  NoRemorse.toView @ Base.F @ a $dFunctor
  = NoRemorse.toView_$stoView @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

